
AVRASM ver. 2.1.30  E:\projects\GitUpload\AVRProjects\6-KeyPadInterrupt\Debug\List\Keypad.asm Wed Oct 30 21:00:11 2019

E:\projects\GitUpload\AVRProjects\6-KeyPadInterrupt\Debug\List\Keypad.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\projects\GitUpload\AVRProjects\6-KeyPadInterrupt\Debug\List\Keypad.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\projects\GitUpload\AVRProjects\6-KeyPadInterrupt\Debug\List\Keypad.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 00ae 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 002a
00002b 7572
00002c 6e6e
00002d 6e69      	.DB  0x2A,0x0,0x72,0x75,0x6E,0x6E,0x69,0x6E
00002e 0067      	.DB  0x67,0x0
                 _0x2000003:
00002f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000030 0002      	.DW  0x02
000031 0160      	.DW  __base_y_G100
000032 005e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000033 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bffb      	OUT  GICR,R31
000039 bfeb      	OUT  GICR,R30
00003a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003b e08d      	LDI  R24,(14-2)+1
00003c e0a2      	LDI  R26,2
00003d 27bb      	CLR  R27
                 __CLEAR_REG:
00003e 93ed      	ST   X+,R30
00003f 958a      	DEC  R24
000040 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000041 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000042 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000043 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000047 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000048 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000049 9185      	LPM  R24,Z+
00004a 9195      	LPM  R25,Z+
00004b 9700      	SBIW R24,0
00004c f061      	BREQ __GLOBAL_INI_END
00004d 91a5      	LPM  R26,Z+
00004e 91b5      	LPM  R27,Z+
00004f 9005      	LPM  R0,Z+
000050 9015      	LPM  R1,Z+
000051 01bf      	MOVW R22,R30
000052 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000053 9005      	LPM  R0,Z+
000054 920d      	ST   X+,R0
000055 9701      	SBIW R24,1
000056 f7e1      	BRNE __GLOBAL_INI_LOOP
000057 01fb      	MOVW R30,R22
000058 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000059 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005a bfed      	OUT  SPL,R30
00005b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005f 940c 00d6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;
                 ;char getKey(){
                 ; 0000 0004 char getKey(){
                 
                 	.CSEG
                 _getKey:
                 ; .FSTART _getKey
                 ; 0000 0005 char k1 = 0xFF;
                 ; 0000 0006 char columns;
                 ; 0000 0007 PORTC.4 = 0;
000061 931a      	ST   -Y,R17
000062 930a      	ST   -Y,R16
                 ;	k1 -> R17
                 ;	columns -> R16
000063 ef1f      	LDI  R17,255
000064 98ac      	CBI  0x15,4
                 ; 0000 0008 columns = PINC & 0x07;
000065 d135      	RCALL SUBOPT_0x0
                 ; 0000 0009 if(columns != 0x07){
000066 f079      	BREQ _0x5
                 ; 0000 000A     switch(columns){
000067 d138      	RCALL SUBOPT_0x1
                 ; 0000 000B         case 0b110:k1 = 1;break;
000068 f411      	BRNE _0x9
000069 e011      	LDI  R17,LOW(1)
00006a c00b      	RJMP _0x8
                 ; 0000 000C         case 0b101:k1 = 2;break;
                 _0x9:
00006b 30e5      	CPI  R30,LOW(0x5)
00006c e0a0      	LDI  R26,HIGH(0x5)
00006d 07fa      	CPC  R31,R26
00006e f411      	BRNE _0xA
00006f e012      	LDI  R17,LOW(2)
000070 c005      	RJMP _0x8
                 ; 0000 000D         case 0b011:k1 = 3;break;
                 _0xA:
000071 30e3      	CPI  R30,LOW(0x3)
000072 e0a0      	LDI  R26,HIGH(0x3)
000073 07fa      	CPC  R31,R26
000074 f409      	BRNE _0x8
000075 e013      	LDI  R17,LOW(3)
                 ; 0000 000E     }
                 _0x8:
                 ; 0000 000F }
                 ; 0000 0010 PORTC.4 = 1;
                 _0x5:
000076 9aac      	SBI  0x15,4
                 ; 0000 0011 
                 ; 0000 0012 PORTC.5 = 0;
000077 98ad      	CBI  0x15,5
                 ; 0000 0013 columns = PINC & 0x07;
000078 d122      	RCALL SUBOPT_0x0
                 ; 0000 0014 if(columns != 0x07){
000079 f079      	BREQ _0x10
                 ; 0000 0015     switch(columns){
00007a d125      	RCALL SUBOPT_0x1
                 ; 0000 0016         case 0b110:k1 = 4;break;
00007b f411      	BRNE _0x14
00007c e014      	LDI  R17,LOW(4)
00007d c00b      	RJMP _0x13
                 ; 0000 0017         case 0b101:k1 = 5;break;
                 _0x14:
00007e 30e5      	CPI  R30,LOW(0x5)
00007f e0a0      	LDI  R26,HIGH(0x5)
000080 07fa      	CPC  R31,R26
000081 f411      	BRNE _0x15
000082 e015      	LDI  R17,LOW(5)
000083 c005      	RJMP _0x13
                 ; 0000 0018         case 0b011:k1 = 6;break;
                 _0x15:
000084 30e3      	CPI  R30,LOW(0x3)
000085 e0a0      	LDI  R26,HIGH(0x3)
000086 07fa      	CPC  R31,R26
000087 f409      	BRNE _0x13
000088 e016      	LDI  R17,LOW(6)
                 ; 0000 0019     }
                 _0x13:
                 ; 0000 001A }
                 ; 0000 001B PORTC.5 = 1;
                 _0x10:
000089 9aad      	SBI  0x15,5
                 ; 0000 001C 
                 ; 0000 001D PORTC.6 = 0;
00008a 98ae      	CBI  0x15,6
                 ; 0000 001E columns = PINC & 0x07;
00008b d10f      	RCALL SUBOPT_0x0
                 ; 0000 001F if(columns != 0x07){
00008c f079      	BREQ _0x1B
                 ; 0000 0020     switch(columns){
00008d d112      	RCALL SUBOPT_0x1
                 ; 0000 0021         case 0b110:k1 = 7;break;
00008e f411      	BRNE _0x1F
00008f e017      	LDI  R17,LOW(7)
000090 c00b      	RJMP _0x1E
                 ; 0000 0022         case 0b101:k1 = 8;break;
                 _0x1F:
000091 30e5      	CPI  R30,LOW(0x5)
000092 e0a0      	LDI  R26,HIGH(0x5)
000093 07fa      	CPC  R31,R26
000094 f411      	BRNE _0x20
000095 e018      	LDI  R17,LOW(8)
000096 c005      	RJMP _0x1E
                 ; 0000 0023         case 0b011:k1 = 9;break;
                 _0x20:
000097 30e3      	CPI  R30,LOW(0x3)
000098 e0a0      	LDI  R26,HIGH(0x3)
000099 07fa      	CPC  R31,R26
00009a f409      	BRNE _0x1E
00009b e019      	LDI  R17,LOW(9)
                 ; 0000 0024     }
                 _0x1E:
                 ; 0000 0025 }
                 ; 0000 0026 PORTC.6 = 1;
                 _0x1B:
00009c 9aae      	SBI  0x15,6
                 ; 0000 0027 
                 ; 0000 0028 PORTC.7 = 0;
00009d 98af      	CBI  0x15,7
                 ; 0000 0029 columns = PINC & 0x07;
00009e d0fc      	RCALL SUBOPT_0x0
                 ; 0000 002A if(columns != 0x07){
00009f f039      	BREQ _0x26
                 ; 0000 002B     switch(columns){
0000a0 2fe0      	MOV  R30,R16
0000a1 e0f0      	LDI  R31,0
                 ; 0000 002C         //case 0b110:k1 = 10;break;
                 ; 0000 002D         case 0b101:k1 = 0;break;
0000a2 30e5      	CPI  R30,LOW(0x5)
0000a3 e0a0      	LDI  R26,HIGH(0x5)
0000a4 07fa      	CPC  R31,R26
0000a5 f409      	BRNE _0x29
0000a6 e010      	LDI  R17,LOW(0)
                 ; 0000 002E         //case 0b011:k1 = 11;break;
                 ; 0000 002F     }
                 _0x29:
                 ; 0000 0030 }
                 ; 0000 0031 PORTC.7 = 1;
                 _0x26:
0000a7 9aaf      	SBI  0x15,7
                 ; 0000 0032 
                 ; 0000 0033 PORTC = 0xF0;
0000a8 efe0      	LDI  R30,LOW(240)
0000a9 bbe5      	OUT  0x15,R30
                 ; 0000 0034 return k1;
0000aa 2fe1      	MOV  R30,R17
0000ab 9109      	LD   R16,Y+
0000ac 9119      	LD   R17,Y+
0000ad 9508      	RET
                 ; 0000 0035 }
                 ; .FEND
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0037 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000ae 920a      	ST   -Y,R0
0000af 921a      	ST   -Y,R1
0000b0 92fa      	ST   -Y,R15
0000b1 936a      	ST   -Y,R22
0000b2 937a      	ST   -Y,R23
0000b3 938a      	ST   -Y,R24
0000b4 939a      	ST   -Y,R25
0000b5 93aa      	ST   -Y,R26
0000b6 93ba      	ST   -Y,R27
0000b7 93ea      	ST   -Y,R30
0000b8 93fa      	ST   -Y,R31
0000b9 b7ef      	IN   R30,SREG
0000ba 93ea      	ST   -Y,R30
                 ; 0000 0038     char k = getKey();
                 ; 0000 0039     lcd_gotoxy(1,1);
0000bb 931a      	ST   -Y,R17
                 ;	k -> R17
0000bc dfa4      	RCALL _getKey
0000bd 2f1e      	MOV  R17,R30
0000be e0e1      	LDI  R30,LOW(1)
0000bf 93ea      	ST   -Y,R30
0000c0 e0a1      	LDI  R26,LOW(1)
0000c1 d070      	RCALL _lcd_gotoxy
                 ; 0000 003A     lcd_putsf("*");
                +
0000c2 e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000c3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000c4 d099      	RCALL _lcd_putsf
                 ; 0000 003B     lcd_putchar(k);
0000c5 2fa1      	MOV  R26,R17
0000c6 d082      	RCALL _lcd_putchar
                 ; 0000 003C }
0000c7 9119      	LD   R17,Y+
0000c8 91e9      	LD   R30,Y+
0000c9 bfef      	OUT  SREG,R30
0000ca 91f9      	LD   R31,Y+
0000cb 91e9      	LD   R30,Y+
0000cc 91b9      	LD   R27,Y+
0000cd 91a9      	LD   R26,Y+
0000ce 9199      	LD   R25,Y+
0000cf 9189      	LD   R24,Y+
0000d0 9179      	LD   R23,Y+
0000d1 9169      	LD   R22,Y+
0000d2 90f9      	LD   R15,Y+
0000d3 9019      	LD   R1,Y+
0000d4 9009      	LD   R0,Y+
0000d5 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 003F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0040 // Declare your local variables here
                 ; 0000 0041 
                 ; 0000 0042 // Input/Output Ports initialization
                 ; 0000 0043 // Port A initialization
                 ; 0000 0044 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0045 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 bbea      	OUT  0x1A,R30
                 ; 0000 0046 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0047 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000d8 bbeb      	OUT  0x1B,R30
                 ; 0000 0048 
                 ; 0000 0049 // Port B initialization
                 ; 0000 004A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000d9 bbe7      	OUT  0x17,R30
                 ; 0000 004C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000da bbe8      	OUT  0x18,R30
                 ; 0000 004E 
                 ; 0000 004F // Port C initialization
                 ; 0000 0050 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0051 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000db e0e7      	LDI  R30,LOW(7)
0000dc bbe4      	OUT  0x14,R30
                 ; 0000 0052 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0053 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000dd eee0      	LDI  R30,LOW(224)
0000de bbe5      	OUT  0x15,R30
                 ; 0000 0054 
                 ; 0000 0055 // Port D initialization
                 ; 0000 0056 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0057 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000df e0e0      	LDI  R30,LOW(0)
0000e0 bbe1      	OUT  0x11,R30
                 ; 0000 0058 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0059 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000e1 bbe2      	OUT  0x12,R30
                 ; 0000 005A 
                 ; 0000 005B // Timer/Counter 0 initialization
                 ; 0000 005C // Clock source: System Clock
                 ; 0000 005D // Clock value: Timer 0 Stopped
                 ; 0000 005E // Mode: Normal top=0xFF
                 ; 0000 005F // OC0 output: Disconnected
                 ; 0000 0060 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000e2 bfe3      	OUT  0x33,R30
                 ; 0000 0061 TCNT0=0x00;
0000e3 bfe2      	OUT  0x32,R30
                 ; 0000 0062 OCR0=0x00;
0000e4 bfec      	OUT  0x3C,R30
                 ; 0000 0063 
                 ; 0000 0064 // Timer/Counter 1 initialization
                 ; 0000 0065 // Clock source: System Clock
                 ; 0000 0066 // Clock value: Timer1 Stopped
                 ; 0000 0067 // Mode: Normal top=0xFFFF
                 ; 0000 0068 // OC1A output: Disconnected
                 ; 0000 0069 // OC1B output: Disconnected
                 ; 0000 006A // Noise Canceler: Off
                 ; 0000 006B // Input Capture on Falling Edge
                 ; 0000 006C // Timer1 Overflow Interrupt: Off
                 ; 0000 006D // Input Capture Interrupt: Off
                 ; 0000 006E // Compare A Match Interrupt: Off
                 ; 0000 006F // Compare B Match Interrupt: Off
                 ; 0000 0070 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000e5 bdef      	OUT  0x2F,R30
                 ; 0000 0071 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000e6 bdee      	OUT  0x2E,R30
                 ; 0000 0072 TCNT1H=0x00;
0000e7 bded      	OUT  0x2D,R30
                 ; 0000 0073 TCNT1L=0x00;
0000e8 bdec      	OUT  0x2C,R30
                 ; 0000 0074 ICR1H=0x00;
0000e9 bde7      	OUT  0x27,R30
                 ; 0000 0075 ICR1L=0x00;
0000ea bde6      	OUT  0x26,R30
                 ; 0000 0076 OCR1AH=0x00;
0000eb bdeb      	OUT  0x2B,R30
                 ; 0000 0077 OCR1AL=0x00;
0000ec bdea      	OUT  0x2A,R30
                 ; 0000 0078 OCR1BH=0x00;
0000ed bde9      	OUT  0x29,R30
                 ; 0000 0079 OCR1BL=0x00;
0000ee bde8      	OUT  0x28,R30
                 ; 0000 007A 
                 ; 0000 007B // Timer/Counter 2 initialization
                 ; 0000 007C // Clock source: System Clock
                 ; 0000 007D // Clock value: Timer2 Stopped
                 ; 0000 007E // Mode: Normal top=0xFF
                 ; 0000 007F // OC2 output: Disconnected
                 ; 0000 0080 ASSR=0<<AS2;
0000ef bde2      	OUT  0x22,R30
                 ; 0000 0081 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000f0 bde5      	OUT  0x25,R30
                 ; 0000 0082 TCNT2=0x00;
0000f1 bde4      	OUT  0x24,R30
                 ; 0000 0083 OCR2=0x00;
0000f2 bde3      	OUT  0x23,R30
                 ; 0000 0084 
                 ; 0000 0085 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0086 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000f3 bfe9      	OUT  0x39,R30
                 ; 0000 0087 
                 ; 0000 0088 // External Interrupt(s) initialization
                 ; 0000 0089 // INT0: On
                 ; 0000 008A // INT0 Mode: Falling Edge
                 ; 0000 008B // INT1: Off
                 ; 0000 008C // INT2: Off
                 ; 0000 008D GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
0000f4 b7eb      	IN   R30,0x3B
0000f5 64e0      	ORI  R30,0x40
0000f6 bfeb      	OUT  0x3B,R30
                 ; 0000 008E MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000f7 e0e2      	LDI  R30,LOW(2)
0000f8 bfe5      	OUT  0x35,R30
                 ; 0000 008F MCUCSR=(0<<ISC2);
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa bfe4      	OUT  0x34,R30
                 ; 0000 0090 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000fb e4e0      	LDI  R30,LOW(64)
0000fc bfea      	OUT  0x3A,R30
                 ; 0000 0091 
                 ; 0000 0092 // USART initialization
                 ; 0000 0093 // USART disabled
                 ; 0000 0094 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000fd e0e0      	LDI  R30,LOW(0)
0000fe b9ea      	OUT  0xA,R30
                 ; 0000 0095 
                 ; 0000 0096 // Analog Comparator initialization
                 ; 0000 0097 // Analog Comparator: Off
                 ; 0000 0098 // The Analog Comparator's positive input is
                 ; 0000 0099 // connected to the AIN0 pin
                 ; 0000 009A // The Analog Comparator's negative input is
                 ; 0000 009B // connected to the AIN1 pin
                 ; 0000 009C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000ff e8e0      	LDI  R30,LOW(128)
000100 b9e8      	OUT  0x8,R30
                 ; 0000 009D SFIOR=(0<<ACME);
000101 e0e0      	LDI  R30,LOW(0)
000102 bfe0      	OUT  0x30,R30
                 ; 0000 009E 
                 ; 0000 009F // ADC initialization
                 ; 0000 00A0 // ADC disabled
                 ; 0000 00A1 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000103 b9e6      	OUT  0x6,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // SPI initialization
                 ; 0000 00A4 // SPI disabled
                 ; 0000 00A5 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000104 b9ed      	OUT  0xD,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // TWI initialization
                 ; 0000 00A8 // TWI disabled
                 ; 0000 00A9 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000105 bfe6      	OUT  0x36,R30
                 ; 0000 00AA 
                 ; 0000 00AB // Alphanumeric LCD initialization
                 ; 0000 00AC // Connections are specified in the
                 ; 0000 00AD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00AE // RS - PORTA Bit 0
                 ; 0000 00AF // RD - PORTA Bit 1
                 ; 0000 00B0 // EN - PORTA Bit 2
                 ; 0000 00B1 // D4 - PORTA Bit 4
                 ; 0000 00B2 // D5 - PORTA Bit 5
                 ; 0000 00B3 // D6 - PORTA Bit 6
                 ; 0000 00B4 // D7 - PORTA Bit 7
                 ; 0000 00B5 // Characters/line: 8
                 ; 0000 00B6 lcd_init(8);
000106 e0a8      	LDI  R26,LOW(8)
000107 d069      	RCALL _lcd_init
                 ; 0000 00B7 
                 ; 0000 00B8 // Global enable interrupts
                 ; 0000 00B9 #asm("sei")
000108 9478      	sei
                 ; 0000 00BA 
                 ; 0000 00BB lcd_gotoxy(0,0);
000109 e0e0      	LDI  R30,LOW(0)
00010a 93ea      	ST   -Y,R30
00010b e0a0      	LDI  R26,LOW(0)
00010c d025      	RCALL _lcd_gotoxy
                 ; 0000 00BC lcd_putsf("running");
                +
00010d e5a6     +LDI R26 , LOW ( 2 * _0x0 + ( 2 ) )
00010e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW2FN _0x0,2
00010f d04e      	RCALL _lcd_putsf
                 ; 0000 00BD while (1)
                 _0x2D:
                 ; 0000 00BE       {
                 ; 0000 00BF       // Place your code here
                 ; 0000 00C0 
                 ; 0000 00C1       }
000110 cfff      	RJMP _0x2D
                 ; 0000 00C2 }
                 _0x30:
000111 cfff      	RJMP _0x30
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000112 93aa      	ST   -Y,R26
000113 b3eb      	IN   R30,0x1B
000114 70ef      	ANDI R30,LOW(0xF)
000115 2fae      	MOV  R26,R30
000116 81e8      	LD   R30,Y
000117 7fe0      	ANDI R30,LOW(0xF0)
000118 2bea      	OR   R30,R26
000119 bbeb      	OUT  0x1B,R30
                +
00011a e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00011b 958a     +DEC R24
00011c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00011d 9ada      	SBI  0x1B,2
                +
00011e e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00011f 958a     +DEC R24
000120 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000121 98da      	CBI  0x1B,2
                +
000122 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000123 958a     +DEC R24
000124 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000125 c073      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000126 93aa      	ST   -Y,R26
000127 81a8      	LD   R26,Y
000128 dfe9      	RCALL __lcd_write_nibble_G100
000129 81e8          ld    r30,y
00012a 95e2          swap  r30
00012b 83e8          st    y,r30
00012c 81a8      	LD   R26,Y
00012d dfe4      	RCALL __lcd_write_nibble_G100
                +
00012e e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00012f 958a     +DEC R24
000130 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000131 c067      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000132 93aa      	ST   -Y,R26
000133 81e8      	LD   R30,Y
000134 e0f0      	LDI  R31,0
000135 5ae0      	SUBI R30,LOW(-__base_y_G100)
000136 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000137 81e0      	LD   R30,Z
000138 81a9      	LDD  R26,Y+1
000139 0fae      	ADD  R26,R30
00013a dfeb      	RCALL __lcd_write_data
00013b 8059      	LDD  R5,Y+1
00013c 8048      	LDD  R4,Y+0
00013d 9622      	ADIW R28,2
00013e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00013f e0a2      	LDI  R26,LOW(2)
000140 d065      	RCALL SUBOPT_0x2
000141 e0ac      	LDI  R26,LOW(12)
000142 dfe3      	RCALL __lcd_write_data
000143 e0a1      	LDI  R26,LOW(1)
000144 d061      	RCALL SUBOPT_0x2
000145 e0e0      	LDI  R30,LOW(0)
000146 2e4e      	MOV  R4,R30
000147 2e5e      	MOV  R5,R30
000148 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000149 93aa      	ST   -Y,R26
00014a 81a8      	LD   R26,Y
00014b 30aa      	CPI  R26,LOW(0xA)
00014c f011      	BREQ _0x2000005
00014d 1457      	CP   R5,R7
00014e f048      	BRLO _0x2000004
                 _0x2000005:
00014f e0e0      	LDI  R30,LOW(0)
000150 93ea      	ST   -Y,R30
000151 9443      	INC  R4
000152 2da4      	MOV  R26,R4
000153 dfde      	RCALL _lcd_gotoxy
000154 81a8      	LD   R26,Y
000155 30aa      	CPI  R26,LOW(0xA)
000156 f409      	BRNE _0x2000007
000157 c041      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000158 9453      	INC  R5
000159 9ad8      	SBI  0x1B,0
00015a 81a8      	LD   R26,Y
00015b dfca      	RCALL __lcd_write_data
00015c 98d8      	CBI  0x1B,0
00015d c03b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00015e 93ba      	ST   -Y,R27
00015f 93aa      	ST   -Y,R26
000160 931a      	ST   -Y,R17
                 _0x200000B:
000161 81e9      	LDD  R30,Y+1
000162 81fa      	LDD  R31,Y+1+1
000163 9631      	ADIW R30,1
000164 83e9      	STD  Y+1,R30
000165 83fa      	STD  Y+1+1,R31
000166 9731      	SBIW R30,1
000167 91e4      	LPM  R30,Z
000168 2f1e      	MOV  R17,R30
000169 30e0      	CPI  R30,0
00016a f019      	BREQ _0x200000D
00016b 2fa1      	MOV  R26,R17
00016c dfdc      	RCALL _lcd_putchar
00016d cff3      	RJMP _0x200000B
                 _0x200000D:
00016e 8118      	LDD  R17,Y+0
00016f 9623      	ADIW R28,3
000170 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000171 93aa      	ST   -Y,R26
000172 b3ea      	IN   R30,0x1A
000173 6fe0      	ORI  R30,LOW(0xF0)
000174 bbea      	OUT  0x1A,R30
000175 9ad2      	SBI  0x1A,2
000176 9ad0      	SBI  0x1A,0
000177 9ad1      	SBI  0x1A,1
000178 98da      	CBI  0x1B,2
000179 98d8      	CBI  0x1B,0
00017a 98d9      	CBI  0x1B,1
00017b 8078      	LDD  R7,Y+0
00017c 81e8      	LD   R30,Y
00017d 58e0      	SUBI R30,-LOW(128)
                +
00017e 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000180 81e8      	LD   R30,Y
000181 54e0      	SUBI R30,-LOW(192)
                +
000182 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000184 e1a4      	LDI  R26,LOW(20)
000185 e0b0      	LDI  R27,0
000186 940e 01b1 	CALL _delay_ms
000188 d022      	RCALL SUBOPT_0x3
000189 d021      	RCALL SUBOPT_0x3
00018a d020      	RCALL SUBOPT_0x3
00018b e2a0      	LDI  R26,LOW(32)
00018c df85      	RCALL __lcd_write_nibble_G100
                +
00018d e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00018e 958a     +DEC R24
00018f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000190 e2a8      	LDI  R26,LOW(40)
000191 df94      	RCALL __lcd_write_data
000192 e0a4      	LDI  R26,LOW(4)
000193 df92      	RCALL __lcd_write_data
000194 e8a5      	LDI  R26,LOW(133)
000195 df90      	RCALL __lcd_write_data
000196 e0a6      	LDI  R26,LOW(6)
000197 df8e      	RCALL __lcd_write_data
000198 dfa6      	RCALL _lcd_clear
                 _0x2020001:
000199 9621      	ADIW R28,1
00019a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00019b b3e3      	IN   R30,0x13
00019c 70e7      	ANDI R30,LOW(0x7)
00019d 2f0e      	MOV  R16,R30
00019e 3007      	CPI  R16,7
00019f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0001a0 2fe0      	MOV  R30,R16
0001a1 e0f0      	LDI  R31,0
0001a2 30e6      	CPI  R30,LOW(0x6)
0001a3 e0a0      	LDI  R26,HIGH(0x6)
0001a4 07fa      	CPC  R31,R26
0001a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0001a6 df7f      	RCALL __lcd_write_data
0001a7 e0a3      	LDI  R26,LOW(3)
0001a8 e0b0      	LDI  R27,0
0001a9 940c 01b1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0001ab e3a0      	LDI  R26,LOW(48)
0001ac df65      	RCALL __lcd_write_nibble_G100
                +
0001ad e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001ae 958a     +DEC R24
0001af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001b0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001b1 9610      	adiw r26,0
0001b2 f039      	breq __delay_ms1
                 __delay_ms0:
0001b3 95a8      	wdr
                +
0001b4 ef8a     +LDI R24 , LOW ( 0xFA )
0001b5 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001b6 9701     +SBIW R24 , 1
0001b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001b8 9711      	sbiw r26,1
0001b9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ba 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   6 r17:  22 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   5 r26:  59 r27:   9 r28:   4 r29:   1 r30: 124 r31:  19 
x  :   3 y  :  61 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   5 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   8 cpi   :  12 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  26 ldd   :   7 ldi   :  77 
lds   :   0 lpm   :   9 lsl   :   0 lsr   :   0 mov   :  12 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  46 pop   :   0 push  :   0 rcall :  34 ret   :   9 
reti  :   1 rjmp  :  14 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  30 std   :   2 sts   :   2 sub   :   0 subi  :   3 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 40 out of 116 (34.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000376    866     20    886   16384   5.4%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
