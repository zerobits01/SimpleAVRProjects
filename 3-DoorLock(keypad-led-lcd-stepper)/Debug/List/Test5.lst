
AVRASM ver. 2.1.30  E:\projects\AVR_Projects\Test5\Debug\List\Test5.asm Wed Oct 30 19:23:00 2019

E:\projects\AVR_Projects\Test5\Debug\List\Test5.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\projects\AVR_Projects\Test5\Debug\List\Test5.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\projects\AVR_Projects\Test5\Debug\List\Test5.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _steps:
00002a 0203
00002b 0406
00002c 080c
00002d 0109      	.DB  0x3,0x2,0x6,0x4,0xC,0x8,0x9,0x1
                 
                 _0x3:
00002e 3231
00002f 3433      	.DB  0x31,0x32,0x33,0x34
                 _0x0:
000030 6e65
000031 6574
000032 2072
000033 6874      	.DB  0x65,0x6E,0x74,0x65,0x72,0x20,0x74,0x68
000034 2065
000035 6170
000036 7373
000037 7000      	.DB  0x65,0x20,0x70,0x61,0x73,0x73,0x0,0x70
000038 7361
000039 3a73
00003a 6300
00003b 656c      	.DB  0x61,0x73,0x73,0x3A,0x0,0x63,0x6C,0x65
00003c 7261
00003d 6465
00003e 6f00
00003f 6570      	.DB  0x61,0x72,0x65,0x64,0x0,0x6F,0x70,0x65
000040 656e
000041 0064
000042 7277
000043 6e6f      	.DB  0x6E,0x65,0x64,0x0,0x77,0x72,0x6F,0x6E
000044 2067
000045 6170
000046 7373
000047 0021      	.DB  0x67,0x20,0x70,0x61,0x73,0x73,0x21,0x0
000048 002a      	.DB  0x2A,0x0
                 _0x2020003:
000049 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004a 0004      	.DW  0x04
00004b 0163      	.DW  _correct
00004c 005c      	.DW  _0x3*2
                 
00004d 0001      	.DW  0x01
00004e 0160      	.DW  _0x15
00004f 006e      	.DW  _0x0*2+14
                 
000050 0001      	.DW  0x01
000051 0161      	.DW  _0x15+1
000052 006e      	.DW  _0x0*2+14
                 
000053 0001      	.DW  0x01
000054 0162      	.DW  _0x15+2
000055 006e      	.DW  _0x0*2+14
                 
000056 0002      	.DW  0x02
000057 0168      	.DW  __base_y_G101
000058 0092      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000059 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005a 94f8      	CLI
00005b 27ee      	CLR  R30
00005c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005d e0f1      	LDI  R31,1
00005e bffb      	OUT  GICR,R31
00005f bfeb      	OUT  GICR,R30
000060 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000061 e08d      	LDI  R24,(14-2)+1
000062 e0a2      	LDI  R26,2
000063 27bb      	CLR  R27
                 __CLEAR_REG:
000064 93ed      	ST   X+,R30
000065 958a      	DEC  R24
000066 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000067 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000068 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000069 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006a 93ed      	ST   X+,R30
00006b 9701      	SBIW R24,1
00006c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006d e9e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006f 9185      	LPM  R24,Z+
000070 9195      	LPM  R25,Z+
000071 9700      	SBIW R24,0
000072 f061      	BREQ __GLOBAL_INI_END
000073 91a5      	LPM  R26,Z+
000074 91b5      	LPM  R27,Z+
000075 9005      	LPM  R0,Z+
000076 9015      	LPM  R1,Z+
000077 01bf      	MOVW R22,R30
000078 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000079 9005      	LPM  R0,Z+
00007a 920d      	ST   X+,R0
00007b 9701      	SBIW R24,1
00007c f7e1      	BRNE __GLOBAL_INI_LOOP
00007d 01fb      	MOVW R30,R22
00007e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000080 bfed      	OUT  SPL,R30
000081 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000082 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000083 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000084 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000085 940c 0087 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;#define STEPPER PORTB
                 ;
                 ;unsigned char correct[] = "1234";
                 
                 	.DSEG
                 ;flash char steps[8] = {0b0011, 0b0010, 0b0110, 0b0100, 0b1100, 0b1000, 0b1001, 0b0001}; // stepper motor half steps
                 ;
                 ;char getKey();
                 ;
                 ;
                 ;void main(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0010 // Declare your local variables here
                 ; 0000 0011 char k; // saving input of keypad
                 ; 0000 0012 int i = 0; // user input index
                 ; 0000 0013 unsigned char user[sizeof(correct)] = ""; // for saving user input
                 ; 0000 0014 bit opened = 0; // for controling stepper and lcd
                 ; 0000 0015 
                 ; 0000 0016 // Input/Output Ports initialization
                 ; 0000 0017 // Port A initialization
                 ; 0000 0018 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0019 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000087 9725      	SBIW R28,5
000088 e0e0      	LDI  R30,LOW(0)
000089 83e8      	ST   Y,R30
00008a 83e9      	STD  Y+1,R30
00008b 83ea      	STD  Y+2,R30
00008c 83eb      	STD  Y+3,R30
00008d 83ec      	STD  Y+4,R30
                 ;	k -> R17
                 ;	i -> R18,R19
                 ;	user -> Y+0
                 ;	opened -> R15.0
00008e 24ff      	CLR  R15
                +
00008f e020     +LDI R18 , LOW ( 0 )
000090 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000091 bbea      	OUT  0x1A,R30
                 ; 0000 001A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000092 bbeb      	OUT  0x1B,R30
                 ; 0000 001C 
                 ; 0000 001D // Port B initialization
                 ; 0000 001E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000093 bbe7      	OUT  0x17,R30
                 ; 0000 0020 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0021 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000094 bbe8      	OUT  0x18,R30
                 ; 0000 0022 
                 ; 0000 0023 // Port C initialization
                 ; 0000 0024 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0025 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000095 bbe4      	OUT  0x14,R30
                 ; 0000 0026 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0027 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000096 bbe5      	OUT  0x15,R30
                 ; 0000 0028 
                 ; 0000 0029 
                 ; 0000 002A // Connections are specified in the
                 ; 0000 002B // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 002C // RS - PORTA Bit 0
                 ; 0000 002D // RD - PORTA Bit 1
                 ; 0000 002E // EN - PORTA Bit 2
                 ; 0000 002F // D4 - PORTA Bit 4
                 ; 0000 0030 // D5 - PORTA Bit 5
                 ; 0000 0031 // D6 - PORTA Bit 6
                 ; 0000 0032 // D7 - PORTA Bit 7
                 ; 0000 0033 // Characters/line: 16
                 ; 0000 0034 lcd_init(16);
000097 e1a0      	LDI  R26,LOW(16)
000098 940e 01f0 	CALL _lcd_init
                 ; 0000 0035 lcd_clear();
00009a 940e 021a 	CALL SUBOPT_0x0
                 ; 0000 0036 lcd_gotoxy(3,0);
                 ; 0000 0037 lcd_putsf("enter the pass");
                 ; 0000 0038 lcd_gotoxy(0,1);
                 ; 0000 0039 lcd_putsf("pass:");
                 ; 0000 003A 
                 ; 0000 003B DDRD = 0xF0;
00009c efe0      	LDI  R30,LOW(240)
00009d bbe1      	OUT  0x11,R30
                 ; 0000 003C DDRC.0 = 1;
00009e 9aa0      	SBI  0x14,0
                 ; 0000 003D PORTC.0 = 0;
00009f 98a8      	CBI  0x15,0
                 ; 0000 003E 
                 ; 0000 003F DDRB = 0x0F;
0000a0 e0ef      	LDI  R30,LOW(15)
0000a1 bbe7      	OUT  0x17,R30
                 ; 0000 0040 STEPPER = 0x00;
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 bbe8      	OUT  0x18,R30
                 ; 0000 0041 
                 ; 0000 0042 i = 0;
                +
0000a4 e020     +LDI R18 , LOW ( 0 )
0000a5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0043 while (1)
                 _0x8:
                 ; 0000 0044       {     STEPPER = steps[0];
0000a6 e5e4      	LDI  R30,LOW(_steps*2)
0000a7 e0f0      	LDI  R31,HIGH(_steps*2)
0000a8 9004      	LPM  R0,Z
0000a9 ba08      	OUT  0x18,R0
                 ; 0000 0045             do{
                 _0xC:
                 ; 0000 0046                 k = getKey();   // can be between 0-11
0000aa d068      	RCALL _getKey
0000ab 2f1e      	MOV  R17,R30
                 ; 0000 0047             }while(k==0xFF);
0000ac 3f1f      	CPI  R17,255
0000ad f3e1      	BREQ _0xC
                 ; 0000 0048             while(getKey() != 0xFF);
                 _0xE:
0000ae d064      	RCALL _getKey
0000af 3fef      	CPI  R30,LOW(0xFF)
0000b0 f7e9      	BRNE _0xE
                 ; 0000 0049             switch(k){
0000b1 2fe1      	MOV  R30,R17
0000b2 e0f0      	LDI  R31,0
                 ; 0000 004A                 case 10 :{
0000b3 30ea      	CPI  R30,LOW(0xA)
0000b4 e0a0      	LDI  R26,HIGH(0xA)
0000b5 07fa      	CPC  R31,R26
0000b6 f479      	BRNE _0x14
                 ; 0000 004B                     // delete
                 ; 0000 004C                     strcpy(user,"");
0000b7 940e 0229 	CALL SUBOPT_0x1
                +
0000b9 e6a0     +LDI R26 , LOW ( _0x15 + ( 0 ) )
0000ba e0b1     +LDI R27 , HIGH ( _0x15 + ( 0 ) )
                 	__POINTW2MN _0x15,0
0000bb 940e 022d 	CALL SUBOPT_0x2
                 ; 0000 004D                     i = 0;
                 ; 0000 004E                     lcd_clear();
0000bd 940e 01be 	CALL _lcd_clear
                 ; 0000 004F                     lcd_putsf("cleared");
                +
0000bf e7a5     +LDI R26 , LOW ( 2 * _0x0 + ( 21 ) )
0000c0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW2FN _0x0,21
0000c1 940e 0232 	CALL SUBOPT_0x3
                 ; 0000 0050                     delay_ms(1000);
                 ; 0000 0051                     lcd_clear();
0000c3 940e 021a 	CALL SUBOPT_0x0
                 ; 0000 0052                     lcd_gotoxy(3,0);
                 ; 0000 0053                     lcd_putsf("enter the pass");
                 ; 0000 0054                     lcd_gotoxy(0,1);
                 ; 0000 0055                     lcd_putsf("pass:");
                 ; 0000 0056 
                 ; 0000 0057                 }
                 ; 0000 0058                  break;
0000c5 c04b      	RJMP _0x13
                 ; 0000 0059                 case 11 :{
                 _0x14:
0000c6 30eb      	CPI  R30,LOW(0xB)
0000c7 e0a0      	LDI  R26,HIGH(0xB)
0000c8 07fa      	CPC  R31,R26
0000c9 f5c1      	BRNE _0x20
                 ; 0000 005A                 // enter
                 ; 0000 005B                     user[i] = '\0';
0000ca 01de      	MOVW R26,R28
0000cb 0fa2      	ADD  R26,R18
0000cc 1fb3      	ADC  R27,R19
0000cd e0e0      	LDI  R30,LOW(0)
0000ce 93ec      	ST   X,R30
                 ; 0000 005C                     if(strcmp(user, correct) == 0){
0000cf 940e 0229 	CALL SUBOPT_0x1
0000d1 e6a3      	LDI  R26,LOW(_correct)
0000d2 e0b1      	LDI  R27,HIGH(_correct)
0000d3 940e 0170 	CALL _strcmp
0000d5 30e0      	CPI  R30,0
0000d6 f4e1      	BRNE _0x17
                 ; 0000 005D                         opened = 1;
0000d7 9468      	SET
0000d8 f8f0      	BLD  R15,0
                 ; 0000 005E                         PORTC.0 = 1;
0000d9 9aa8      	SBI  0x15,0
                 ; 0000 005F                         STEPPER = steps[2];
                +
0000da e5e6     +LDI R30 , LOW ( 2 * _steps + ( 2 ) )
0000db e0f0     +LDI R31 , HIGH ( 2 * _steps + ( 2 ) )
                 	__POINTW1FN _steps,2
0000dc 9004      	LPM  R0,Z
0000dd ba08      	OUT  0x18,R0
                 ; 0000 0060                         lcd_clear();
0000de 940e 0237 	CALL SUBOPT_0x4
                 ; 0000 0061                         lcd_gotoxy(0,3);
                 ; 0000 0062                         lcd_putsf("opened");
                +
0000e0 e7ad     +LDI R26 , LOW ( 2 * _0x0 + ( 29 ) )
0000e1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW2FN _0x0,29
0000e2 940e 01dd 	CALL _lcd_putsf
                 ; 0000 0063                         while(getKey()!=10);
                 _0x1A:
0000e4 d02e      	RCALL _getKey
0000e5 30ea      	CPI  R30,LOW(0xA)
0000e6 f7e9      	BRNE _0x1A
                 ; 0000 0064                         lcd_clear();
0000e7 940e 021a 	CALL SUBOPT_0x0
                 ; 0000 0065                         lcd_gotoxy(3,0);
                 ; 0000 0066                         lcd_putsf("enter the pass");
                 ; 0000 0067                         lcd_gotoxy(0,1);
                 ; 0000 0068                         lcd_putsf("pass:");
                 ; 0000 0069                         opened = 0;
0000e9 94e8      	CLT
0000ea f8f0      	BLD  R15,0
                 ; 0000 006A                         PORTC.0 = 0;
0000eb 98a8      	CBI  0x15,0
                 ; 0000 006B                         strcpy(user,"");
0000ec 940e 0229 	CALL SUBOPT_0x1
                +
0000ee e6a1     +LDI R26 , LOW ( _0x15 + ( 1 ) )
0000ef e0b1     +LDI R27 , HIGH ( _0x15 + ( 1 ) )
                 	__POINTW2MN _0x15,1
0000f0 940e 022d 	CALL SUBOPT_0x2
                 ; 0000 006C                         i = 0;
                 ; 0000 006D 
                 ; 0000 006E                     }else{
0000f2 c00e      	RJMP _0x1F
                 _0x17:
                 ; 0000 006F                             lcd_clear();
0000f3 940e 0237 	CALL SUBOPT_0x4
                 ; 0000 0070                             lcd_gotoxy(0,3);
                 ; 0000 0071                             lcd_putsf("wrong pass!");
                +
0000f5 e8a4     +LDI R26 , LOW ( 2 * _0x0 + ( 36 ) )
0000f6 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 36 ) )
                 	__POINTW2FN _0x0,36
0000f7 940e 0232 	CALL SUBOPT_0x3
                 ; 0000 0072                             delay_ms(1000);
                 ; 0000 0073                             strcpy(user,"");
0000f9 940e 0229 	CALL SUBOPT_0x1
                +
0000fb e6a2     +LDI R26 , LOW ( _0x15 + ( 2 ) )
0000fc e0b1     +LDI R27 , HIGH ( _0x15 + ( 2 ) )
                 	__POINTW2MN _0x15,2
0000fd 940e 022d 	CALL SUBOPT_0x2
                 ; 0000 0074                             i = 0;
                 ; 0000 0075                             lcd_clear();
0000ff 940e 021a 	CALL SUBOPT_0x0
                 ; 0000 0076                             lcd_gotoxy(3,0);
                 ; 0000 0077                             lcd_putsf("enter the pass");
                 ; 0000 0078                             lcd_gotoxy(0,1);
                 ; 0000 0079                             lcd_putsf("pass:");
                 ; 0000 007A                     }
                 _0x1F:
                 ; 0000 007B                 }
                 ; 0000 007C 
                 ; 0000 007D                  break;
000101 c00f      	RJMP _0x13
                 ; 0000 007E                 default :{
                 _0x20:
                 ; 0000 007F                     if(i < 4){
                +
000102 3024     +CPI R18 , LOW ( 4 )
000103 e0e0     +LDI R30 , HIGH ( 4 )
000104 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000105 f44c      	BRGE _0x21
                 ; 0000 0080                         user[i] = k;
000106 01f9      	MOVW R30,R18
000107 01de      	MOVW R26,R28
000108 0fea      	ADD  R30,R26
000109 1ffb      	ADC  R31,R27
00010a 8310      	ST   Z,R17
                 ; 0000 0081                         lcd_putsf("*");
                +
00010b e9a0     +LDI R26 , LOW ( 2 * _0x0 + ( 48 ) )
00010c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW2FN _0x0,48
00010d 940e 01dd 	CALL _lcd_putsf
                 ; 0000 0082                     }
                 ; 0000 0083                     i++;
                 _0x21:
                +
00010f 5f2f     +SUBI R18 , LOW ( - 1 )
000110 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0084                 }
                 ; 0000 0085             }
                 _0x13:
                 ; 0000 0086 
                 ; 0000 0087 
                 ; 0000 0088       }
000111 cf94      	RJMP _0x8
                 ; 0000 0089 }
                 _0x22:
000112 cfff      	RJMP _0x22
                 ; .FEND
                 
                 	.DSEG
                 _0x15:
000160           	.BYTE 0x3
                 ;
                 ;char getKey(){
                 ; 0000 008B char getKey(){
                 
                 	.CSEG
                 _getKey:
                 ; .FSTART _getKey
                 ; 0000 008C char k1 = 0xFF;
                 ; 0000 008D char columns;
                 ; 0000 008E PORTD.4 = 0;
000113 931a      	ST   -Y,R17
000114 930a      	ST   -Y,R16
                 ;	k1 -> R17
                 ;	columns -> R16
000115 ef1f      	LDI  R17,255
000116 9894      	CBI  0x12,4
                 ; 0000 008F columns = PIND & 0x07;
000117 940e 023c 	CALL SUBOPT_0x5
                 ; 0000 0090 if(columns != 0x07){
000119 f081      	BREQ _0x25
                 ; 0000 0091     switch(columns){
00011a 940e 0241 	CALL SUBOPT_0x6
                 ; 0000 0092         case 0b110:k1 = '1';break;
00011c f411      	BRNE _0x29
00011d e311      	LDI  R17,LOW(49)
00011e c00b      	RJMP _0x28
                 ; 0000 0093         case 0b101:k1 = '2';break;
                 _0x29:
00011f 30e5      	CPI  R30,LOW(0x5)
000120 e0a0      	LDI  R26,HIGH(0x5)
000121 07fa      	CPC  R31,R26
000122 f411      	BRNE _0x2A
000123 e312      	LDI  R17,LOW(50)
000124 c005      	RJMP _0x28
                 ; 0000 0094         case 0b011:k1 = '3';break;
                 _0x2A:
000125 30e3      	CPI  R30,LOW(0x3)
000126 e0a0      	LDI  R26,HIGH(0x3)
000127 07fa      	CPC  R31,R26
000128 f409      	BRNE _0x28
000129 e313      	LDI  R17,LOW(51)
                 ; 0000 0095     }
                 _0x28:
                 ; 0000 0096 }
                 ; 0000 0097 PORTD.4 = 1;
                 _0x25:
00012a 9a94      	SBI  0x12,4
                 ; 0000 0098 
                 ; 0000 0099 PORTD.5 = 0;
00012b 9895      	CBI  0x12,5
                 ; 0000 009A columns = PIND & 0x07;
00012c 940e 023c 	CALL SUBOPT_0x5
                 ; 0000 009B if(columns != 0x07){
00012e f081      	BREQ _0x30
                 ; 0000 009C     switch(columns){
00012f 940e 0241 	CALL SUBOPT_0x6
                 ; 0000 009D         case 0b110:k1 = '4';break;
000131 f411      	BRNE _0x34
000132 e314      	LDI  R17,LOW(52)
000133 c00b      	RJMP _0x33
                 ; 0000 009E         case 0b101:k1 = '5';break;
                 _0x34:
000134 30e5      	CPI  R30,LOW(0x5)
000135 e0a0      	LDI  R26,HIGH(0x5)
000136 07fa      	CPC  R31,R26
000137 f411      	BRNE _0x35
000138 e315      	LDI  R17,LOW(53)
000139 c005      	RJMP _0x33
                 ; 0000 009F         case 0b011:k1 = '6';break;
                 _0x35:
00013a 30e3      	CPI  R30,LOW(0x3)
00013b e0a0      	LDI  R26,HIGH(0x3)
00013c 07fa      	CPC  R31,R26
00013d f409      	BRNE _0x33
00013e e316      	LDI  R17,LOW(54)
                 ; 0000 00A0     }
                 _0x33:
                 ; 0000 00A1 }
                 ; 0000 00A2 PORTD.5 = 1;
                 _0x30:
00013f 9a95      	SBI  0x12,5
                 ; 0000 00A3 
                 ; 0000 00A4 PORTD.6 = 0;
000140 9896      	CBI  0x12,6
                 ; 0000 00A5 columns = PIND & 0x07;
000141 940e 023c 	CALL SUBOPT_0x5
                 ; 0000 00A6 if(columns != 0x07){
000143 f081      	BREQ _0x3B
                 ; 0000 00A7     switch(columns){
000144 940e 0241 	CALL SUBOPT_0x6
                 ; 0000 00A8         case 0b110:k1 = '7';break;
000146 f411      	BRNE _0x3F
000147 e317      	LDI  R17,LOW(55)
000148 c00b      	RJMP _0x3E
                 ; 0000 00A9         case 0b101:k1 = '8';break;
                 _0x3F:
000149 30e5      	CPI  R30,LOW(0x5)
00014a e0a0      	LDI  R26,HIGH(0x5)
00014b 07fa      	CPC  R31,R26
00014c f411      	BRNE _0x40
00014d e318      	LDI  R17,LOW(56)
00014e c005      	RJMP _0x3E
                 ; 0000 00AA         case 0b011:k1 = '9';break;
                 _0x40:
00014f 30e3      	CPI  R30,LOW(0x3)
000150 e0a0      	LDI  R26,HIGH(0x3)
000151 07fa      	CPC  R31,R26
000152 f409      	BRNE _0x3E
000153 e319      	LDI  R17,LOW(57)
                 ; 0000 00AB     }
                 _0x3E:
                 ; 0000 00AC }
                 ; 0000 00AD PORTD.6 = 1;
                 _0x3B:
000154 9a96      	SBI  0x12,6
                 ; 0000 00AE 
                 ; 0000 00AF PORTD.7 = 0;
000155 9897      	CBI  0x12,7
                 ; 0000 00B0 columns = PIND & 0x07;
000156 940e 023c 	CALL SUBOPT_0x5
                 ; 0000 00B1 if(columns != 0x07){
000158 f081      	BREQ _0x46
                 ; 0000 00B2     switch(columns){
000159 940e 0241 	CALL SUBOPT_0x6
                 ; 0000 00B3         case 0b110:k1 = 10;break;
00015b f411      	BRNE _0x4A
00015c e01a      	LDI  R17,LOW(10)
00015d c00b      	RJMP _0x49
                 ; 0000 00B4         case 0b101:k1 = '0';break;
                 _0x4A:
00015e 30e5      	CPI  R30,LOW(0x5)
00015f e0a0      	LDI  R26,HIGH(0x5)
000160 07fa      	CPC  R31,R26
000161 f411      	BRNE _0x4B
000162 e310      	LDI  R17,LOW(48)
000163 c005      	RJMP _0x49
                 ; 0000 00B5         case 0b011:k1 = 11;break;
                 _0x4B:
000164 30e3      	CPI  R30,LOW(0x3)
000165 e0a0      	LDI  R26,HIGH(0x3)
000166 07fa      	CPC  R31,R26
000167 f409      	BRNE _0x49
000168 e01b      	LDI  R17,LOW(11)
                 ; 0000 00B6     }
                 _0x49:
                 ; 0000 00B7 }
                 ; 0000 00B8 PORTD.7 = 1;
                 _0x46:
000169 9a97      	SBI  0x12,7
                 ; 0000 00B9 
                 ; 0000 00BA PORTD = 0xFF;
00016a efef      	LDI  R30,LOW(255)
00016b bbe2      	OUT  0x12,R30
                 ; 0000 00BB return k1;
00016c 2fe1      	MOV  R30,R17
00016d 9109      	LD   R16,Y+
00016e 9119      	LD   R17,Y+
00016f 9508      	RET
                 ; 0000 00BC }
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
000170 93ba      	ST   -Y,R27
000171 93aa      	ST   -Y,R26
000172 91e9          ld   r30,y+
000173 91f9          ld   r31,y+
000174 91a9          ld   r26,y+
000175 91b9          ld   r27,y+
                 strcmp0:
000176 916d          ld   r22,x+
000177 9171          ld   r23,z+
000178 1767          cp   r22,r23
000179 f421          brne strcmp1
00017a 2366          tst  r22
00017b f7d1          brne strcmp0
                 strcmp3:
00017c 27ee          clr  r30
00017d 9508          ret
                 strcmp1:
00017e 1b67          sub  r22,r23
00017f f3e1          breq strcmp3
000180 e0e1          ldi  r30,1
000181 f408          brcc strcmp2
000182 50e2          subi r30,2
                 strcmp2:
000183 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
000184 93ba      	ST   -Y,R27
000185 93aa      	ST   -Y,R26
000186 91e9          ld   r30,y+
000187 91f9          ld   r31,y+
000188 91a9          ld   r26,y+
000189 91b9          ld   r27,y+
00018a 01cd          movw r24,r26
                 strcpy0:
00018b 9161          ld   r22,z+
00018c 936d          st   x+,r22
00018d 2366          tst  r22
00018e f7e1          brne strcpy0
00018f 01fc          movw r30,r24
000190 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000191 93aa      	ST   -Y,R26
000192 b3eb      	IN   R30,0x1B
000193 70ef      	ANDI R30,LOW(0xF)
000194 2fae      	MOV  R26,R30
000195 81e8      	LD   R30,Y
000196 7fe0      	ANDI R30,LOW(0xF0)
000197 2bea      	OR   R30,R26
000198 bbeb      	OUT  0x1B,R30
                +
000199 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00019a 958a     +DEC R24
00019b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00019c 9ada      	SBI  0x1B,2
                +
00019d e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00019e 958a     +DEC R24
00019f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001a0 98da      	CBI  0x1B,2
                +
0001a1 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001a2 958a     +DEC R24
0001a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001a4 c073      	RJMP _0x2040001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001a5 93aa      	ST   -Y,R26
0001a6 81a8      	LD   R26,Y
0001a7 dfe9      	RCALL __lcd_write_nibble_G101
0001a8 81e8          ld    r30,y
0001a9 95e2          swap  r30
0001aa 83e8          st    y,r30
0001ab 81a8      	LD   R26,Y
0001ac dfe4      	RCALL __lcd_write_nibble_G101
                +
0001ad e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001ae 958a     +DEC R24
0001af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001b0 c067      	RJMP _0x2040001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001b1 93aa      	ST   -Y,R26
0001b2 81e8      	LD   R30,Y
0001b3 e0f0      	LDI  R31,0
0001b4 59e8      	SUBI R30,LOW(-__base_y_G101)
0001b5 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0001b6 81e0      	LD   R30,Z
0001b7 81a9      	LDD  R26,Y+1
0001b8 0fae      	ADD  R26,R30
0001b9 dfeb      	RCALL __lcd_write_data
0001ba 8059      	LDD  R5,Y+1
0001bb 8048      	LDD  R4,Y+0
0001bc 9622      	ADIW R28,2
0001bd 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001be e0a2      	LDI  R26,LOW(2)
0001bf d087      	RCALL SUBOPT_0x7
0001c0 e0ac      	LDI  R26,LOW(12)
0001c1 dfe3      	RCALL __lcd_write_data
0001c2 e0a1      	LDI  R26,LOW(1)
0001c3 d083      	RCALL SUBOPT_0x7
0001c4 e0e0      	LDI  R30,LOW(0)
0001c5 2e4e      	MOV  R4,R30
0001c6 2e5e      	MOV  R5,R30
0001c7 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001c8 93aa      	ST   -Y,R26
0001c9 81a8      	LD   R26,Y
0001ca 30aa      	CPI  R26,LOW(0xA)
0001cb f011      	BREQ _0x2020005
0001cc 1457      	CP   R5,R7
0001cd f048      	BRLO _0x2020004
                 _0x2020005:
0001ce e0e0      	LDI  R30,LOW(0)
0001cf 93ea      	ST   -Y,R30
0001d0 9443      	INC  R4
0001d1 2da4      	MOV  R26,R4
0001d2 dfde      	RCALL _lcd_gotoxy
0001d3 81a8      	LD   R26,Y
0001d4 30aa      	CPI  R26,LOW(0xA)
0001d5 f409      	BRNE _0x2020007
0001d6 c041      	RJMP _0x2040001
                 _0x2020007:
                 _0x2020004:
0001d7 9453      	INC  R5
0001d8 9ad8      	SBI  0x1B,0
0001d9 81a8      	LD   R26,Y
0001da dfca      	RCALL __lcd_write_data
0001db 98d8      	CBI  0x1B,0
0001dc c03b      	RJMP _0x2040001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0001dd 93ba      	ST   -Y,R27
0001de 93aa      	ST   -Y,R26
0001df 931a      	ST   -Y,R17
                 _0x202000B:
0001e0 81e9      	LDD  R30,Y+1
0001e1 81fa      	LDD  R31,Y+1+1
0001e2 9631      	ADIW R30,1
0001e3 83e9      	STD  Y+1,R30
0001e4 83fa      	STD  Y+1+1,R31
0001e5 9731      	SBIW R30,1
0001e6 91e4      	LPM  R30,Z
0001e7 2f1e      	MOV  R17,R30
0001e8 30e0      	CPI  R30,0
0001e9 f019      	BREQ _0x202000D
0001ea 2fa1      	MOV  R26,R17
0001eb dfdc      	RCALL _lcd_putchar
0001ec cff3      	RJMP _0x202000B
                 _0x202000D:
0001ed 8118      	LDD  R17,Y+0
0001ee 9623      	ADIW R28,3
0001ef 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001f0 93aa      	ST   -Y,R26
0001f1 b3ea      	IN   R30,0x1A
0001f2 6fe0      	ORI  R30,LOW(0xF0)
0001f3 bbea      	OUT  0x1A,R30
0001f4 9ad2      	SBI  0x1A,2
0001f5 9ad0      	SBI  0x1A,0
0001f6 9ad1      	SBI  0x1A,1
0001f7 98da      	CBI  0x1B,2
0001f8 98d8      	CBI  0x1B,0
0001f9 98d9      	CBI  0x1B,1
0001fa 8078      	LDD  R7,Y+0
0001fb 81e8      	LD   R30,Y
0001fc 58e0      	SUBI R30,-LOW(128)
                +
0001fd 93e0 016a+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0001ff 81e8      	LD   R30,Y
000200 54e0      	SUBI R30,-LOW(192)
                +
000201 93e0 016b+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000203 e1a4      	LDI  R26,LOW(20)
000204 e0b0      	LDI  R27,0
000205 940e 0252 	CALL _delay_ms
000207 d044      	RCALL SUBOPT_0x8
000208 d043      	RCALL SUBOPT_0x8
000209 d042      	RCALL SUBOPT_0x8
00020a e2a0      	LDI  R26,LOW(32)
00020b df85      	RCALL __lcd_write_nibble_G101
                +
00020c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00020d 958a     +DEC R24
00020e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00020f e2a8      	LDI  R26,LOW(40)
000210 df94      	RCALL __lcd_write_data
000211 e0a4      	LDI  R26,LOW(4)
000212 df92      	RCALL __lcd_write_data
000213 e8a5      	LDI  R26,LOW(133)
000214 df90      	RCALL __lcd_write_data
000215 e0a6      	LDI  R26,LOW(6)
000216 df8e      	RCALL __lcd_write_data
000217 dfa6      	RCALL _lcd_clear
                 _0x2040001:
000218 9621      	ADIW R28,1
000219 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _correct:
000163           	.BYTE 0x5
                 __base_y_G101:
000168           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x0:
00021a dfa3      	RCALL _lcd_clear
00021b e0e3      	LDI  R30,LOW(3)
00021c 93ea      	ST   -Y,R30
00021d e0a0      	LDI  R26,LOW(0)
00021e df92      	RCALL _lcd_gotoxy
                +
00021f e6a0     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000220 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000221 dfbb      	RCALL _lcd_putsf
000222 e0e0      	LDI  R30,LOW(0)
000223 93ea      	ST   -Y,R30
000224 e0a1      	LDI  R26,LOW(1)
000225 df8b      	RCALL _lcd_gotoxy
                +
000226 e6af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000227 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
000228 cfb4      	RJMP _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000229 01fe      	MOVW R30,R28
00022a 93fa      	ST   -Y,R31
00022b 93ea      	ST   -Y,R30
00022c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00022d 940e 0184 	CALL _strcpy
                +
00022f e020     +LDI R18 , LOW ( 0 )
000230 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000231 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000232 dfaa      	RCALL _lcd_putsf
000233 eea8      	LDI  R26,LOW(1000)
000234 e0b3      	LDI  R27,HIGH(1000)
000235 940c 0252 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000237 df86      	RCALL _lcd_clear
000238 e0e0      	LDI  R30,LOW(0)
000239 93ea      	ST   -Y,R30
00023a e0a3      	LDI  R26,LOW(3)
00023b cf75      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00023c b3e0      	IN   R30,0x10
00023d 70e7      	ANDI R30,LOW(0x7)
00023e 2f0e      	MOV  R16,R30
00023f 3007      	CPI  R16,7
000240 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
000241 2fe0      	MOV  R30,R16
000242 e0f0      	LDI  R31,0
000243 30e6      	CPI  R30,LOW(0x6)
000244 e0a0      	LDI  R26,HIGH(0x6)
000245 07fa      	CPC  R31,R26
000246 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000247 df5d      	RCALL __lcd_write_data
000248 e0a3      	LDI  R26,LOW(3)
000249 e0b0      	LDI  R27,0
00024a 940c 0252 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
00024c e3a0      	LDI  R26,LOW(48)
00024d df43      	RCALL __lcd_write_nibble_G101
                +
00024e e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00024f 958a     +DEC R24
000250 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000251 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000252 9610      	adiw r26,0
000253 f039      	breq __delay_ms1
                 __delay_ms0:
000254 95a8      	wdr
                +
000255 ef8a     +LDI R24 , LOW ( 0xFA )
000256 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000257 9701     +SBIW R24 , 1
000258 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000259 9711      	sbiw r26,1
00025a f7c9      	brne __delay_ms0
                 __delay_ms1:
00025b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   8 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   3 
r16:   5 r17:  24 r18:   7 r19:   6 r20:   0 r21:   0 r22:   9 r23:   3 
r24:  23 r25:   3 r26:  81 r27:  22 r28:   8 r29:   1 r30: 112 r31:  26 
x  :   6 y  :  55 z  :  14 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :   5 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  10 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  32 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  30 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :  12 cpi   :  20 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  24 ld    :  24 ldd   :   7 ldi   : 109 
lds   :   0 lpm   :  13 lsl   :   0 lsr   :   0 mov   :  11 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  20 pop   :   0 push  :   0 rcall :  29 ret   :  14 
reti  :   0 rjmp  :  21 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :  11 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   6 sts   :   2 sub   :   1 subi  :   5 swap  :   1 
tst   :   2 wdr   :   1 
Instructions used: 46 out of 116 (39.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004b8   1112     96   1208   16384   7.4%
[.dseg] 0x000060 0x00016c      0     12     12    1024   1.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
