;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;#include <delay.h>
;#include <alcd.h>
;
;#define STEPPER PORTB
;
;unsigned char correct[] = "1234";

	.DSEG
;flash char steps[8] = {0b0011, 0b0010, 0b0110, 0b0100, 0b1100, 0b1000, 0b1001, 0b0001}; // stepper motor half steps
;
;char getKey();
;
;
;void main(void)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0010 // Declare your local variables here
; 0000 0011 char k; // saving input of keypad
; 0000 0012 int i = 0; // user input index
; 0000 0013 unsigned char user[sizeof(correct)] = ""; // for saving user input
; 0000 0014 bit opened = 0; // for controling stepper and lcd
; 0000 0015 
; 0000 0016 // Input/Output Ports initialization
; 0000 0017 // Port A initialization
; 0000 0018 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0019 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	k -> R17
;	i -> R18,R19
;	user -> Y+0
;	opened -> R15.0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 001B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001C 
; 0000 001D // Port B initialization
; 0000 001E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 001F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0020 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0021 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0022 
; 0000 0023 // Port C initialization
; 0000 0024 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0025 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0026 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0027 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0028 
; 0000 0029 
; 0000 002A // Connections are specified in the
; 0000 002B // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 002C // RS - PORTA Bit 0
; 0000 002D // RD - PORTA Bit 1
; 0000 002E // EN - PORTA Bit 2
; 0000 002F // D4 - PORTA Bit 4
; 0000 0030 // D5 - PORTA Bit 5
; 0000 0031 // D6 - PORTA Bit 6
; 0000 0032 // D7 - PORTA Bit 7
; 0000 0033 // Characters/line: 16
; 0000 0034 lcd_init(16);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0035 lcd_clear();
;PCODE: $0000002A VOL: 0
; 0000 0036 lcd_gotoxy(3,0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0037 lcd_putsf("enter the pass");
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0038 lcd_gotoxy(0,1);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0039 lcd_putsf("pass:");
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003A 
; 0000 003B DDRD = 0xF0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003C DDRC.0 = 1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003D PORTC.0 = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003E 
; 0000 003F DDRB = 0x0F;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0040 STEPPER = 0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0041 
; 0000 0042 i = 0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0043 while (1)
;PCODE: $00000045 VOL: 0
; 0000 0044       {     STEPPER = steps[0];
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0045             do{
;PCODE: $00000049 VOL: 0
; 0000 0046                 k = getKey();   // can be between 0-11
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0047             }while(k==0xFF);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0048             while(getKey() != 0xFF);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0049             switch(k){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004A                 case 10 :{
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004B                     // delete
; 0000 004C                     strcpy(user,"");
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004D                     i = 0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 004E                     lcd_clear();
;PCODE: $00000063 VOL: 0
; 0000 004F                     lcd_putsf("cleared");
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0050                     delay_ms(1000);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0051                     lcd_clear();
;PCODE: $00000069 VOL: 0
; 0000 0052                     lcd_gotoxy(3,0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0053                     lcd_putsf("enter the pass");
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0054                     lcd_gotoxy(0,1);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0055                     lcd_putsf("pass:");
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0056 
; 0000 0057                 }
; 0000 0058                  break;
;PCODE: $00000078 VOL: 0
; 0000 0059                 case 11 :{
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 005A                 // enter
; 0000 005B                     user[i] = '\0';
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005C                     if(strcmp(user, correct) == 0){
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 005D                         opened = 1;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005E                         PORTC.0 = 1;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005F                         STEPPER = steps[2];
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0060                         lcd_clear();
;PCODE: $0000008F VOL: 0
; 0000 0061                         lcd_gotoxy(0,3);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0062                         lcd_putsf("opened");
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0063                         while(getKey()!=10);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0064                         lcd_clear();
;PCODE: $0000009D VOL: 0
; 0000 0065                         lcd_gotoxy(3,0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0066                         lcd_putsf("enter the pass");
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0067                         lcd_gotoxy(0,1);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0068                         lcd_putsf("pass:");
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0069                         opened = 0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 006A                         PORTC.0 = 0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006B                         strcpy(user,"");
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 006C                         i = 0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 006D 
; 0000 006E                     }else{
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 006F                             lcd_clear();
;PCODE: $000000BA VOL: 0
; 0000 0070                             lcd_gotoxy(0,3);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0071                             lcd_putsf("wrong pass!");
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0072                             delay_ms(1000);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0073                             strcpy(user,"");
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0074                             i = 0;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0075                             lcd_clear();
;PCODE: $000000CB VOL: 0
; 0000 0076                             lcd_gotoxy(3,0);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0077                             lcd_putsf("enter the pass");
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0078                             lcd_gotoxy(0,1);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0079                             lcd_putsf("pass:");
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 007A                     }
;PCODE: $000000DA VOL: 0
; 0000 007B                 }
; 0000 007C 
; 0000 007D                  break;
;PCODE: $000000DB VOL: 0
; 0000 007E                 default :{
;PCODE: $000000DC VOL: 0
; 0000 007F                     if(i < 4){
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0080                         user[i] = k;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0081                         lcd_putsf("*");
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0082                     }
; 0000 0083                     i++;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0084                 }
; 0000 0085             }
;PCODE: $000000EA VOL: 0
; 0000 0086 
; 0000 0087 
; 0000 0088       }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0089 }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0

	.DSEG
_0x15:
	.BYTE 0x3
;
;char getKey(){
; 0000 008B char getKey(){

	.CSEG
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 008C char k1 = 0xFF;
; 0000 008D char columns;
; 0000 008E PORTD.4 = 0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;	k1 -> R17
;	columns -> R16
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 008F columns = PIND & 0x07;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0090 if(columns != 0x07){
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0091     switch(columns){
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0092         case 0b110:k1 = '1';break;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0093         case 0b101:k1 = '2';break;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0094         case 0b011:k1 = '3';break;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0095     }
;PCODE: $00000112 VOL: 0
; 0000 0096 }
; 0000 0097 PORTD.4 = 1;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0098 
; 0000 0099 PORTD.5 = 0;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 009A columns = PIND & 0x07;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 009B if(columns != 0x07){
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 009C     switch(columns){
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 009D         case 0b110:k1 = '4';break;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 009E         case 0b101:k1 = '5';break;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 009F         case 0b011:k1 = '6';break;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00A0     }
;PCODE: $00000131 VOL: 0
; 0000 00A1 }
; 0000 00A2 PORTD.5 = 1;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00A3 
; 0000 00A4 PORTD.6 = 0;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00A5 columns = PIND & 0x07;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00A6 if(columns != 0x07){
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00A7     switch(columns){
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00A8         case 0b110:k1 = '7';break;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00A9         case 0b101:k1 = '8';break;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00AA         case 0b011:k1 = '9';break;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00AB     }
;PCODE: $00000150 VOL: 0
; 0000 00AC }
; 0000 00AD PORTD.6 = 1;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00AE 
; 0000 00AF PORTD.7 = 0;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00B0 columns = PIND & 0x07;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00B1 if(columns != 0x07){
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00B2     switch(columns){
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00B3         case 0b110:k1 = 10;break;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00B4         case 0b101:k1 = '0';break;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00B5         case 0b011:k1 = 11;break;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00B6     }
;PCODE: $0000016F VOL: 0
; 0000 00B7 }
; 0000 00B8 PORTD.7 = 1;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00B9 
; 0000 00BA PORTD = 0xFF;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00BB return k1;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00BC }
;PCODE: $00000178 VOL: 0
