
AVRASM ver. 2.1.30  E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm Sun Oct 27 22:04:24 2019

E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1090): warning: Register r7 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1091): warning: Register r6 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1092): warning: Register r9 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1093): warning: Register r8 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1094): warning: Register r11 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1095): warning: Register r10 already defined by the .DEF directive
E:\projects\AVR_Projects\LastTest_1\Debug\List\Test9.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0072 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 00a4 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000      	.DB  0x0,0x0
                 
                 _0x0:
000037 0061
000038 0062
000039 0063      	.DB  0x61,0x0,0x62,0x0,0x63,0x0
                 _0x2020003:
00003a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003b 0001      	.DW  0x01
00003c 0002      	.DW  0x02
00003d 0066      	.DW  __REG_BIT_VARS*2
                 
00003e 0006      	.DW  0x06
00003f 0004      	.DW  0x04
000040 0068      	.DW  __REG_VARS*2
                 
000041 0002      	.DW  0x02
000042 0170      	.DW  __base_y_G101
000043 0074      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bffb      	OUT  GICR,R31
00004a bfeb      	OUT  GICR,R30
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 00d6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0023 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000072 93ea      	ST   -Y,R30
000073 93fa      	ST   -Y,R31
000074 b7ef      	IN   R30,SREG
000075 93ea      	ST   -Y,R30
                 ; 0000 0024 char status,data;
                 ; 0000 0025 status=UCSRA;
000076 931a      	ST   -Y,R17
000077 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000078 b11b      	IN   R17,11
                 ; 0000 0026 data=UDR;
000079 b10c      	IN   R16,12
                 ; 0000 0027 
                 ; 0000 0028 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00007a 2fe1      	MOV  R30,R17
00007b 71ec      	ANDI R30,LOW(0x1C)
00007c f489      	BRNE _0x3
                 ; 0000 0029    {
                 ; 0000 002A    rx_buffer[rx_wr_index++]=data;
00007d 2de5      	MOV  R30,R5
00007e 9453      	INC  R5
00007f e0f0      	LDI  R31,0
000080 5ae0      	SUBI R30,LOW(-_rx_buffer)
000081 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000082 8300      	ST   Z,R16
                 ; 0000 002B #if RX_BUFFER_SIZE == 256
                 ; 0000 002C    // special case for receiver buffer size=256
                 ; 0000 002D    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 002E #else
                 ; 0000 002F    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000083 e0e8      	LDI  R30,LOW(8)
000084 15e5      	CP   R30,R5
000085 f409      	BRNE _0x4
000086 2455      	CLR  R5
                 ; 0000 0030    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000087 9473      	INC  R7
000088 e0e8      	LDI  R30,LOW(8)
000089 15e7      	CP   R30,R7
00008a f419      	BRNE _0x5
                 ; 0000 0031       {
                 ; 0000 0032       rx_counter=0;
00008b 2477      	CLR  R7
                 ; 0000 0033       rx_buffer_overflow=1;
00008c 9468      	SET
00008d f820      	BLD  R2,0
                 ; 0000 0034       }
                 ; 0000 0035 #endif
                 ; 0000 0036    }
                 _0x5:
                 ; 0000 0037 }
                 _0x3:
00008e 9109      	LD   R16,Y+
00008f 9119      	LD   R17,Y+
000090 c025      	RJMP _0x1F
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 003E {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 003F char data;
                 ; 0000 0040 while (rx_counter==0);
000091 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
000092 2077      	TST  R7
000093 f3f1      	BREQ _0x6
                 ; 0000 0041 data=rx_buffer[rx_rd_index++];
000094 2de4      	MOV  R30,R4
000095 9443      	INC  R4
000096 e0f0      	LDI  R31,0
000097 5ae0      	SUBI R30,LOW(-_rx_buffer)
000098 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000099 8110      	LD   R17,Z
                 ; 0000 0042 #if RX_BUFFER_SIZE != 256
                 ; 0000 0043 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
00009a e0e8      	LDI  R30,LOW(8)
00009b 15e4      	CP   R30,R4
00009c f409      	BRNE _0x9
00009d 2444      	CLR  R4
                 ; 0000 0044 #endif
                 ; 0000 0045 #asm("cli")
                 _0x9:
00009e 94f8      	cli
                 ; 0000 0046 --rx_counter;
00009f 947a      	DEC  R7
                 ; 0000 0047 #asm("sei")
0000a0 9478      	sei
                 ; 0000 0048 return data;
0000a1 2fe1      	MOV  R30,R17
0000a2 9119      	LD   R17,Y+
0000a3 9508      	RET
                 ; 0000 0049 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 005F {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000a4 93ea      	ST   -Y,R30
0000a5 93fa      	ST   -Y,R31
0000a6 b7ef      	IN   R30,SREG
0000a7 93ea      	ST   -Y,R30
                 ; 0000 0060 if (tx_counter)
0000a8 2088      	TST  R8
0000a9 f061      	BREQ _0xA
                 ; 0000 0061    {
                 ; 0000 0062    --tx_counter;
0000aa 948a      	DEC  R8
                 ; 0000 0063    UDR=tx_buffer[tx_rd_index++];
0000ab 2de9      	MOV  R30,R9
0000ac 9493      	INC  R9
0000ad e0f0      	LDI  R31,0
0000ae 59e8      	SUBI R30,LOW(-_tx_buffer)
0000af 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000b0 81e0      	LD   R30,Z
0000b1 b9ec      	OUT  0xC,R30
                 ; 0000 0064 #if TX_BUFFER_SIZE != 256
                 ; 0000 0065    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000b2 e0e8      	LDI  R30,LOW(8)
0000b3 15e9      	CP   R30,R9
0000b4 f409      	BRNE _0xB
0000b5 2499      	CLR  R9
                 ; 0000 0066 #endif
                 ; 0000 0067    }
                 _0xB:
                 ; 0000 0068 }
                 _0xA:
                 _0x1F:
0000b6 91e9      	LD   R30,Y+
0000b7 bfef      	OUT  SREG,R30
0000b8 91f9      	LD   R31,Y+
0000b9 91e9      	LD   R30,Y+
0000ba 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 006F {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0070 while (tx_counter == TX_BUFFER_SIZE);
0000bb 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xC:
0000bc e0e8      	LDI  R30,LOW(8)
0000bd 15e8      	CP   R30,R8
0000be f3e9      	BREQ _0xC
                 ; 0000 0071 #asm("cli")
0000bf 94f8      	cli
                 ; 0000 0072 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000c0 2088      	TST  R8
0000c1 f411      	BRNE _0x10
0000c2 995d      	SBIC 0xB,5
0000c3 c00d      	RJMP _0xF
                 _0x10:
                 ; 0000 0073    {
                 ; 0000 0074    tx_buffer[tx_wr_index++]=c;
0000c4 2de6      	MOV  R30,R6
0000c5 9463      	INC  R6
0000c6 e0f0      	LDI  R31,0
0000c7 59e8      	SUBI R30,LOW(-_tx_buffer)
0000c8 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000c9 81a8      	LD   R26,Y
0000ca 83a0      	STD  Z+0,R26
                 ; 0000 0075 #if TX_BUFFER_SIZE != 256
                 ; 0000 0076    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
0000cb e0e8      	LDI  R30,LOW(8)
0000cc 15e6      	CP   R30,R6
0000cd f409      	BRNE _0x12
0000ce 2466      	CLR  R6
                 ; 0000 0077 #endif
                 ; 0000 0078    ++tx_counter;
                 _0x12:
0000cf 9483      	INC  R8
                 ; 0000 0079    }
                 ; 0000 007A else
0000d0 c002      	RJMP _0x13
                 _0xF:
                 ; 0000 007B    UDR=c;
0000d1 81e8      	LD   R30,Y
0000d2 b9ec      	OUT  0xC,R30
                 ; 0000 007C #asm("sei")
                 _0x13:
0000d3 9478      	sei
                 ; 0000 007D }
0000d4 940c 032e 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 0085 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0086 // Declare your local variables here
                 ; 0000 0087 char data;
                 ; 0000 0088 // Input/Output Ports initialization
                 ; 0000 0089 // Port A initialization
                 ; 0000 008A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 008B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
                 ;	data -> R17
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 bbea      	OUT  0x1A,R30
                 ; 0000 008C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 008D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000d8 bbeb      	OUT  0x1B,R30
                 ; 0000 008E 
                 ; 0000 008F // Port B initialization
                 ; 0000 0090 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0091 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000d9 bbe7      	OUT  0x17,R30
                 ; 0000 0092 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0093 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000da bbe8      	OUT  0x18,R30
                 ; 0000 0094 
                 ; 0000 0095 // Port C initialization
                 ; 0000 0096 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0097 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000db bbe4      	OUT  0x14,R30
                 ; 0000 0098 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0099 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000dc bbe5      	OUT  0x15,R30
                 ; 0000 009A 
                 ; 0000 009B // Port D initialization
                 ; 0000 009C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000dd bbe1      	OUT  0x11,R30
                 ; 0000 009E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000de bbe2      	OUT  0x12,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Timer/Counter 0 initialization
                 ; 0000 00A2 // Clock source: System Clock
                 ; 0000 00A3 // Clock value: Timer 0 Stopped
                 ; 0000 00A4 // Mode: Normal top=0xFF
                 ; 0000 00A5 // OC0 output: Disconnected
                 ; 0000 00A6 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000df bfe3      	OUT  0x33,R30
                 ; 0000 00A7 TCNT0=0x00;
0000e0 bfe2      	OUT  0x32,R30
                 ; 0000 00A8 OCR0=0x00;
0000e1 bfec      	OUT  0x3C,R30
                 ; 0000 00A9 
                 ; 0000 00AA // Timer/Counter 1 initialization
                 ; 0000 00AB // Clock source: System Clock
                 ; 0000 00AC // Clock value: Timer1 Stopped
                 ; 0000 00AD // Mode: Normal top=0xFFFF
                 ; 0000 00AE // OC1A output: Disconnected
                 ; 0000 00AF // OC1B output: Disconnected
                 ; 0000 00B0 // Noise Canceler: Off
                 ; 0000 00B1 // Input Capture on Falling Edge
                 ; 0000 00B2 // Timer1 Overflow Interrupt: Off
                 ; 0000 00B3 // Input Capture Interrupt: Off
                 ; 0000 00B4 // Compare A Match Interrupt: Off
                 ; 0000 00B5 // Compare B Match Interrupt: Off
                 ; 0000 00B6 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000e2 bdef      	OUT  0x2F,R30
                 ; 0000 00B7 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000e3 bdee      	OUT  0x2E,R30
                 ; 0000 00B8 TCNT1H=0x00;
0000e4 bded      	OUT  0x2D,R30
                 ; 0000 00B9 TCNT1L=0x00;
0000e5 bdec      	OUT  0x2C,R30
                 ; 0000 00BA ICR1H=0x00;
0000e6 bde7      	OUT  0x27,R30
                 ; 0000 00BB ICR1L=0x00;
0000e7 bde6      	OUT  0x26,R30
                 ; 0000 00BC OCR1AH=0x00;
0000e8 bdeb      	OUT  0x2B,R30
                 ; 0000 00BD OCR1AL=0x00;
0000e9 bdea      	OUT  0x2A,R30
                 ; 0000 00BE OCR1BH=0x00;
0000ea bde9      	OUT  0x29,R30
                 ; 0000 00BF OCR1BL=0x00;
0000eb bde8      	OUT  0x28,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Timer/Counter 2 initialization
                 ; 0000 00C2 // Clock source: System Clock
                 ; 0000 00C3 // Clock value: Timer2 Stopped
                 ; 0000 00C4 // Mode: Normal top=0xFF
                 ; 0000 00C5 // OC2 output: Disconnected
                 ; 0000 00C6 ASSR=0<<AS2;
0000ec bde2      	OUT  0x22,R30
                 ; 0000 00C7 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000ed bde5      	OUT  0x25,R30
                 ; 0000 00C8 TCNT2=0x00;
0000ee bde4      	OUT  0x24,R30
                 ; 0000 00C9 OCR2=0x00;
0000ef bde3      	OUT  0x23,R30
                 ; 0000 00CA 
                 ; 0000 00CB // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00CC TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000f0 bfe9      	OUT  0x39,R30
                 ; 0000 00CD 
                 ; 0000 00CE // External Interrupt(s) initialization
                 ; 0000 00CF // INT0: Off
                 ; 0000 00D0 // INT1: Off
                 ; 0000 00D1 // INT2: Off
                 ; 0000 00D2 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000f1 bfe5      	OUT  0x35,R30
                 ; 0000 00D3 MCUCSR=(0<<ISC2);
0000f2 bfe4      	OUT  0x34,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // USART initialization
                 ; 0000 00D6 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00D7 // USART Receiver: On
                 ; 0000 00D8 // USART Transmitter: On
                 ; 0000 00D9 // USART Mode: Asynchronous
                 ; 0000 00DA // USART Baud Rate: 4800
                 ; 0000 00DB UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000f3 b9eb      	OUT  0xB,R30
                 ; 0000 00DC UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000f4 ede8      	LDI  R30,LOW(216)
0000f5 b9ea      	OUT  0xA,R30
                 ; 0000 00DD UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000f6 e8e6      	LDI  R30,LOW(134)
0000f7 bde0      	OUT  0x20,R30
                 ; 0000 00DE UBRRH=0x00;
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 bde0      	OUT  0x20,R30
                 ; 0000 00DF UBRRL=0x0C;
0000fa e0ec      	LDI  R30,LOW(12)
0000fb b9e9      	OUT  0x9,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // Analog Comparator initialization
                 ; 0000 00E2 // Analog Comparator: Off
                 ; 0000 00E3 // The Analog Comparator's positive input is
                 ; 0000 00E4 // connected to the AIN0 pin
                 ; 0000 00E5 // The Analog Comparator's negative input is
                 ; 0000 00E6 // connected to the AIN1 pin
                 ; 0000 00E7 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000fc e8e0      	LDI  R30,LOW(128)
0000fd b9e8      	OUT  0x8,R30
                 ; 0000 00E8 SFIOR=(0<<ACME);
0000fe e0e0      	LDI  R30,LOW(0)
0000ff bfe0      	OUT  0x30,R30
                 ; 0000 00E9 
                 ; 0000 00EA // ADC initialization
                 ; 0000 00EB // ADC disabled
                 ; 0000 00EC ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000100 b9e6      	OUT  0x6,R30
                 ; 0000 00ED 
                 ; 0000 00EE // SPI initialization
                 ; 0000 00EF // SPI disabled
                 ; 0000 00F0 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000101 b9ed      	OUT  0xD,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // TWI initialization
                 ; 0000 00F3 // TWI disabled
                 ; 0000 00F4 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000102 bfe6      	OUT  0x36,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // Alphanumeric LCD initialization
                 ; 0000 00F7 // Connections are specified in the
                 ; 0000 00F8 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00F9 // RS - PORTA Bit 0
                 ; 0000 00FA // RD - PORTA Bit 1
                 ; 0000 00FB // EN - PORTA Bit 2
                 ; 0000 00FC // D4 - PORTA Bit 4
                 ; 0000 00FD // D5 - PORTA Bit 5
                 ; 0000 00FE // D6 - PORTA Bit 6
                 ; 0000 00FF // D7 - PORTA Bit 7
                 ; 0000 0100 // Characters/line: 16
                 ; 0000 0101 lcd_init(16);
000103 e1a0      	LDI  R26,LOW(16)
000104 940e 0303 	CALL _lcd_init
                 ; 0000 0102 
                 ; 0000 0103 // Global enable interrupts
                 ; 0000 0104 #asm("sei")
000106 9478      	sei
                 ; 0000 0105 
                 ; 0000 0106 while (1)
                 _0x14:
                 ; 0000 0107       {
                 ; 0000 0108               //lcd_gotoxy(0,0);
                 ; 0000 0109               //lcd_putsf("done!");
                 ; 0000 010A               if(!rx_counter){
000107 2077      	TST  R7
000108 f589      	BRNE _0x17
                 ; 0000 010B                 data = getchar();
000109 df87      	RCALL _getchar
00010a 2f1e      	MOV  R17,R30
                 ; 0000 010C                 switch(data){
00010b e0f0      	LDI  R31,0
                 ; 0000 010D     case 'a' :
00010c 36e1      	CPI  R30,LOW(0x61)
00010d e0a0      	LDI  R26,HIGH(0x61)
00010e 07fa      	CPC  R31,R26
00010f f449      	BRNE _0x1B
                 ; 0000 010E            printf("a");
                +
000110 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000111 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000112 940e 0349 	CALL SUBOPT_0x0
                 ; 0000 010F            lcd_gotoxy(0,0);
                 ; 0000 0110            lcd_putsf("a");
                +
000114 e6ae     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000115 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000116 940e 02f0 	CALL _lcd_putsf
                 ; 0000 0111     break;
000118 c021      	RJMP _0x1A
                 ; 0000 0112     case 'b' :
                 _0x1B:
000119 36e2      	CPI  R30,LOW(0x62)
00011a e0a0      	LDI  R26,HIGH(0x62)
00011b 07fa      	CPC  R31,R26
00011c f449      	BRNE _0x1C
                 ; 0000 0113             printf("b");
                +
00011d e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 2 ) )
00011e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW1FN _0x0,2
00011f 940e 0349 	CALL SUBOPT_0x0
                 ; 0000 0114            lcd_gotoxy(0,0);
                 ; 0000 0115            lcd_putsf("b");
                +
000121 e7a0     +LDI R26 , LOW ( 2 * _0x0 + ( 2 ) )
000122 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW2FN _0x0,2
000123 940e 02f0 	CALL _lcd_putsf
                 ; 0000 0116     break;
000125 c014      	RJMP _0x1A
                 ; 0000 0117     case 'c' :
                 _0x1C:
000126 36e3      	CPI  R30,LOW(0x63)
000127 e0a0      	LDI  R26,HIGH(0x63)
000128 07fa      	CPC  R31,R26
000129 f481      	BRNE _0x1A
                 ; 0000 0118            lcd_gotoxy(0,0);
00012a e0e0      	LDI  R30,LOW(0)
00012b 93ea      	ST   -Y,R30
00012c e0a0      	LDI  R26,LOW(0)
00012d 940e 02c2 	CALL _lcd_gotoxy
                 ; 0000 0119            lcd_putsf("c");
                +
00012f e7a2     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
000130 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
000131 940e 02f0 	CALL _lcd_putsf
                 ; 0000 011A            printf("c");
                +
000133 e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 4 ) )
000134 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW1FN _0x0,4
000135 93fa      	ST   -Y,R31
000136 93ea      	ST   -Y,R30
000137 e080      	LDI  R24,0
000138 d144      	RCALL _printf
000139 9622      	ADIW R28,2
                 ; 0000 011B     break;
                 ; 0000 011C 
                 ; 0000 011D }
                 _0x1A:
                 ; 0000 011E               }
                 ; 0000 011F       }
                 _0x17:
00013a cfcc      	RJMP _0x14
                 ; 0000 0120 }
                 _0x1E:
00013b cfff      	RJMP _0x1E
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
00013c 93ba      	ST   -Y,R27
00013d 93aa      	ST   -Y,R26
00013e 81aa      	LDD  R26,Y+2
00013f df7b      	RCALL _putchar
000140 81a8      	LD   R26,Y
000141 81b9      	LDD  R27,Y+1
000142 91ed      	LD   R30,X+
000143 91fd      	LD   R31,X+
000144 9631      	ADIW R30,1
000145 93fe      	ST   -X,R31
000146 93ee      	ST   -X,R30
000147 940c 0301 	JMP  _0x2080002
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000149 93ba      	ST   -Y,R27
00014a 93aa      	ST   -Y,R26
00014b 9726      	SBIW R28,6
00014c 940e 03a0 	CALL __SAVELOCR6
00014e e010      	LDI  R17,0
00014f 85ac      	LDD  R26,Y+12
000150 85bd      	LDD  R27,Y+12+1
000151 e0e0      	LDI  R30,LOW(0)
000152 e0f0      	LDI  R31,HIGH(0)
000153 93ed      	ST   X+,R30
000154 93fc      	ST   X,R31
                 _0x2000016:
000155 89ea      	LDD  R30,Y+18
000156 89fb      	LDD  R31,Y+18+1
000157 9631      	ADIW R30,1
000158 8bea      	STD  Y+18,R30
000159 8bfb      	STD  Y+18+1,R31
00015a 9731      	SBIW R30,1
00015b 91e4      	LPM  R30,Z
00015c 2f2e      	MOV  R18,R30
00015d 30e0      	CPI  R30,0
00015e f409      	BRNE PC+2
00015f c115      	RJMP _0x2000018
000160 2fe1      	MOV  R30,R17
000161 30e0      	CPI  R30,0
000162 f439      	BRNE _0x200001C
000163 3225      	CPI  R18,37
000164 f411      	BRNE _0x200001D
000165 e011      	LDI  R17,LOW(1)
000166 c002      	RJMP _0x200001E
                 _0x200001D:
000167 940e 0354 	CALL SUBOPT_0x1
                 _0x200001E:
000169 c10a      	RJMP _0x200001B
                 _0x200001C:
00016a 30e1      	CPI  R30,LOW(0x1)
00016b f4a9      	BRNE _0x200001F
00016c 3225      	CPI  R18,37
00016d f419      	BRNE _0x2000020
00016e 940e 0354 	CALL SUBOPT_0x1
000170 c102      	RJMP _0x20000CC
                 _0x2000020:
000171 e012      	LDI  R17,LOW(2)
000172 e040      	LDI  R20,LOW(0)
000173 e000      	LDI  R16,LOW(0)
000174 322d      	CPI  R18,45
000175 f411      	BRNE _0x2000021
000176 e001      	LDI  R16,LOW(1)
000177 c0fc      	RJMP _0x200001B
                 _0x2000021:
000178 322b      	CPI  R18,43
000179 f411      	BRNE _0x2000022
00017a e24b      	LDI  R20,LOW(43)
00017b c0f8      	RJMP _0x200001B
                 _0x2000022:
00017c 3220      	CPI  R18,32
00017d f411      	BRNE _0x2000023
00017e e240      	LDI  R20,LOW(32)
00017f c0f4      	RJMP _0x200001B
                 _0x2000023:
000180 c002      	RJMP _0x2000024
                 _0x200001F:
000181 30e2      	CPI  R30,LOW(0x2)
000182 f439      	BRNE _0x2000025
                 _0x2000024:
000183 e050      	LDI  R21,LOW(0)
000184 e013      	LDI  R17,LOW(3)
000185 3320      	CPI  R18,48
000186 f411      	BRNE _0x2000026
000187 6800      	ORI  R16,LOW(128)
000188 c0eb      	RJMP _0x200001B
                 _0x2000026:
000189 c003      	RJMP _0x2000027
                 _0x2000025:
00018a 30e3      	CPI  R30,LOW(0x3)
00018b f009      	BREQ PC+2
00018c c0e7      	RJMP _0x200001B
                 _0x2000027:
00018d 3320      	CPI  R18,48
00018e f010      	BRLO _0x200002A
00018f 332a      	CPI  R18,58
000190 f008      	BRLO _0x200002B
                 _0x200002A:
000191 c007      	RJMP _0x2000029
                 _0x200002B:
000192 e0aa      	LDI  R26,LOW(10)
000193 9f5a      	MUL  R21,R26
000194 2d50      	MOV  R21,R0
000195 2fe2      	MOV  R30,R18
000196 53e0      	SUBI R30,LOW(48)
000197 0f5e      	ADD  R21,R30
000198 c0db      	RJMP _0x200001B
                 _0x2000029:
000199 2fe2      	MOV  R30,R18
00019a 36e3      	CPI  R30,LOW(0x63)
00019b f449      	BRNE _0x200002F
00019c 940e 035b 	CALL SUBOPT_0x2
00019e 89e8      	LDD  R30,Y+16
00019f 89f9      	LDD  R31,Y+16+1
0001a0 81a4      	LDD  R26,Z+4
0001a1 93aa      	ST   -Y,R26
0001a2 940e 0361 	CALL SUBOPT_0x3
0001a4 c0ce      	RJMP _0x2000030
                 _0x200002F:
0001a5 37e3      	CPI  R30,LOW(0x73)
0001a6 f441      	BRNE _0x2000032
0001a7 940e 035b 	CALL SUBOPT_0x2
0001a9 940e 0367 	CALL SUBOPT_0x4
0001ab 940e 0330 	CALL _strlen
0001ad 2f1e      	MOV  R17,R30
0001ae c00a      	RJMP _0x2000033
                 _0x2000032:
0001af 37e0      	CPI  R30,LOW(0x70)
0001b0 f461      	BRNE _0x2000035
0001b1 940e 035b 	CALL SUBOPT_0x2
0001b3 940e 0367 	CALL SUBOPT_0x4
0001b5 940e 033c 	CALL _strlenf
0001b7 2f1e      	MOV  R17,R30
0001b8 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001b9 6002      	ORI  R16,LOW(2)
0001ba 770f      	ANDI R16,LOW(127)
0001bb e030      	LDI  R19,LOW(0)
0001bc c034      	RJMP _0x2000036
                 _0x2000035:
0001bd 36e4      	CPI  R30,LOW(0x64)
0001be f011      	BREQ _0x2000039
0001bf 36e9      	CPI  R30,LOW(0x69)
0001c0 f411      	BRNE _0x200003A
                 _0x2000039:
0001c1 6004      	ORI  R16,LOW(4)
0001c2 c002      	RJMP _0x200003B
                 _0x200003A:
0001c3 37e5      	CPI  R30,LOW(0x75)
0001c4 f431      	BRNE _0x200003C
                 _0x200003B:
0001c5 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001c6 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001c7 83ee      	STD  Y+6,R30
0001c8 83ff      	STD  Y+6+1,R31
0001c9 e015      	LDI  R17,LOW(5)
0001ca c00c      	RJMP _0x200003D
                 _0x200003C:
0001cb 35e8      	CPI  R30,LOW(0x58)
0001cc f411      	BRNE _0x200003F
0001cd 6008      	ORI  R16,LOW(8)
0001ce c003      	RJMP _0x2000040
                 _0x200003F:
0001cf 37e8      	CPI  R30,LOW(0x78)
0001d0 f009      	BREQ PC+2
0001d1 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001d2 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001d3 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001d4 83ee      	STD  Y+6,R30
0001d5 83ff      	STD  Y+6+1,R31
0001d6 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001d7 ff02      	SBRS R16,2
0001d8 c014      	RJMP _0x2000042
0001d9 940e 035b 	CALL SUBOPT_0x2
0001db 940e 0371 	CALL SUBOPT_0x5
0001dd 85ab      	LDD  R26,Y+11
0001de 23aa      	TST  R26
0001df f43a      	BRPL _0x2000043
0001e0 85ea      	LDD  R30,Y+10
0001e1 85fb      	LDD  R31,Y+10+1
0001e2 940e 0394 	CALL __ANEGW1
0001e4 87ea      	STD  Y+10,R30
0001e5 87fb      	STD  Y+10+1,R31
0001e6 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001e7 3040      	CPI  R20,0
0001e8 f011      	BREQ _0x2000044
0001e9 5f1f      	SUBI R17,-LOW(1)
0001ea c001      	RJMP _0x2000045
                 _0x2000044:
0001eb 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001ec c004      	RJMP _0x2000046
                 _0x2000042:
0001ed 940e 035b 	CALL SUBOPT_0x2
0001ef 940e 0371 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001f1 fd00      	SBRC R16,0
0001f2 c011      	RJMP _0x2000047
                 _0x2000048:
0001f3 1715      	CP   R17,R21
0001f4 f478      	BRSH _0x200004A
0001f5 ff07      	SBRS R16,7
0001f6 c008      	RJMP _0x200004B
0001f7 ff02      	SBRS R16,2
0001f8 c004      	RJMP _0x200004C
0001f9 7f0b      	ANDI R16,LOW(251)
0001fa 2f24      	MOV  R18,R20
0001fb 5011      	SUBI R17,LOW(1)
0001fc c001      	RJMP _0x200004D
                 _0x200004C:
0001fd e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001fe c001      	RJMP _0x200004E
                 _0x200004B:
0001ff e220      	LDI  R18,LOW(32)
                 _0x200004E:
000200 940e 0354 	CALL SUBOPT_0x1
000202 5051      	SUBI R21,LOW(1)
000203 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000204 2f31      	MOV  R19,R17
000205 ff01      	SBRS R16,1
000206 c017      	RJMP _0x200004F
                 _0x2000050:
000207 3030      	CPI  R19,0
000208 f0a1      	BREQ _0x2000052
000209 ff03      	SBRS R16,3
00020a c006      	RJMP _0x2000053
00020b 81ee      	LDD  R30,Y+6
00020c 81ff      	LDD  R31,Y+6+1
00020d 9125      	LPM  R18,Z+
00020e 83ee      	STD  Y+6,R30
00020f 83ff      	STD  Y+6+1,R31
000210 c005      	RJMP _0x2000054
                 _0x2000053:
000211 81ae      	LDD  R26,Y+6
000212 81bf      	LDD  R27,Y+6+1
000213 912d      	LD   R18,X+
000214 83ae      	STD  Y+6,R26
000215 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000216 940e 0354 	CALL SUBOPT_0x1
000218 3050      	CPI  R21,0
000219 f009      	BREQ _0x2000055
00021a 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00021b 5031      	SUBI R19,LOW(1)
00021c cfea      	RJMP _0x2000050
                 _0x2000052:
00021d c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00021e e320      	LDI  R18,LOW(48)
00021f 81ee      	LDD  R30,Y+6
000220 81ff      	LDD  R31,Y+6+1
000221 940e 039c 	CALL __GETW1PF
000223 87e8      	STD  Y+8,R30
000224 87f9      	STD  Y+8+1,R31
000225 81ee      	LDD  R30,Y+6
000226 81ff      	LDD  R31,Y+6+1
000227 9632      	ADIW R30,2
000228 83ee      	STD  Y+6,R30
000229 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00022a 85e8      	LDD  R30,Y+8
00022b 85f9      	LDD  R31,Y+8+1
00022c 85aa      	LDD  R26,Y+10
00022d 85bb      	LDD  R27,Y+10+1
00022e 17ae      	CP   R26,R30
00022f 07bf      	CPC  R27,R31
000230 f050      	BRLO _0x200005C
000231 5f2f      	SUBI R18,-LOW(1)
000232 85a8      	LDD  R26,Y+8
000233 85b9      	LDD  R27,Y+8+1
000234 85ea      	LDD  R30,Y+10
000235 85fb      	LDD  R31,Y+10+1
000236 1bea      	SUB  R30,R26
000237 0bfb      	SBC  R31,R27
000238 87ea      	STD  Y+10,R30
000239 87fb      	STD  Y+10+1,R31
00023a cfef      	RJMP _0x200005A
                 _0x200005C:
00023b 332a      	CPI  R18,58
00023c f028      	BRLO _0x200005D
00023d ff03      	SBRS R16,3
00023e c002      	RJMP _0x200005E
00023f 5f29      	SUBI R18,-LOW(7)
000240 c001      	RJMP _0x200005F
                 _0x200005E:
000241 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000242 fd04      	SBRC R16,4
000243 c01a      	RJMP _0x2000061
000244 3321      	CPI  R18,49
000245 f420      	BRSH _0x2000063
000246 85a8      	LDD  R26,Y+8
000247 85b9      	LDD  R27,Y+8+1
000248 9711      	SBIW R26,1
000249 f409      	BRNE _0x2000062
                 _0x2000063:
00024a c009      	RJMP _0x20000CD
                 _0x2000062:
00024b 1753      	CP   R21,R19
00024c f010      	BRLO _0x2000067
00024d ff00      	SBRS R16,0
00024e c001      	RJMP _0x2000068
                 _0x2000067:
00024f c013      	RJMP _0x2000066
                 _0x2000068:
000250 e220      	LDI  R18,LOW(32)
000251 ff07      	SBRS R16,7
000252 c00b      	RJMP _0x2000069
000253 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000254 6100      	ORI  R16,LOW(16)
000255 ff02      	SBRS R16,2
000256 c007      	RJMP _0x200006A
000257 7f0b      	ANDI R16,LOW(251)
000258 934a      	ST   -Y,R20
000259 940e 0361 	CALL SUBOPT_0x3
00025b 3050      	CPI  R21,0
00025c f009      	BREQ _0x200006B
00025d 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00025e 940e 0354 	CALL SUBOPT_0x1
000260 3050      	CPI  R21,0
000261 f009      	BREQ _0x200006C
000262 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000263 5031      	SUBI R19,LOW(1)
000264 85a8      	LDD  R26,Y+8
000265 85b9      	LDD  R27,Y+8+1
000266 9712      	SBIW R26,2
000267 f008      	BRLO _0x2000059
000268 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000269 ff00      	SBRS R16,0
00026a c008      	RJMP _0x200006D
                 _0x200006E:
00026b 3050      	CPI  R21,0
00026c f031      	BREQ _0x2000070
00026d 5051      	SUBI R21,LOW(1)
00026e e2e0      	LDI  R30,LOW(32)
00026f 93ea      	ST   -Y,R30
000270 940e 0361 	CALL SUBOPT_0x3
000272 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000273 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000274 cee0      	RJMP _0x2000016
                 _0x2000018:
000275 85ac      	LDD  R26,Y+12
000276 85bd      	LDD  R27,Y+12+1
000277 940e 0398 	CALL __GETW1P
000279 940e 03a7 	CALL __LOADLOCR6
00027b 9664      	ADIW R28,20
00027c 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
00027d 92ff      	PUSH R15
00027e 2ef8      	MOV  R15,R24
00027f 9726      	SBIW R28,6
000280 931a      	ST   -Y,R17
000281 930a      	ST   -Y,R16
000282 01de      	MOVW R26,R28
000283 9614      	ADIW R26,4
000284 940e 0390 	CALL __ADDW2R15
000286 018d      	MOVW R16,R26
000287 e0e0      	LDI  R30,LOW(0)
000288 83ec      	STD  Y+4,R30
000289 83ed      	STD  Y+4+1,R30
00028a 83ee      	STD  Y+6,R30
00028b 83ef      	STD  Y+6+1,R30
00028c 01de      	MOVW R26,R28
00028d 9618      	ADIW R26,8
00028e 940e 0390 	CALL __ADDW2R15
000290 940e 0398 	CALL __GETW1P
000292 93fa      	ST   -Y,R31
000293 93ea      	ST   -Y,R30
000294 931a      	ST   -Y,R17
000295 930a      	ST   -Y,R16
000296 e3ec      	LDI  R30,LOW(_put_usart_G100)
000297 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000298 93fa      	ST   -Y,R31
000299 93ea      	ST   -Y,R30
00029a 01de      	MOVW R26,R28
00029b 9618      	ADIW R26,8
00029c deac      	RCALL __print_G100
00029d 8119      	LDD  R17,Y+1
00029e 8108      	LDD  R16,Y+0
00029f 9628      	ADIW R28,8
0002a0 90ff      	POP  R15
0002a1 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002a2 93aa      	ST   -Y,R26
0002a3 b3eb      	IN   R30,0x1B
0002a4 70ef      	ANDI R30,LOW(0xF)
0002a5 2fae      	MOV  R26,R30
0002a6 81e8      	LD   R30,Y
0002a7 7fe0      	ANDI R30,LOW(0xF0)
0002a8 2bea      	OR   R30,R26
0002a9 bbeb      	OUT  0x1B,R30
                +
0002aa e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002ab 958a     +DEC R24
0002ac f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002ad 9ada      	SBI  0x1B,2
                +
0002ae e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002af 958a     +DEC R24
0002b0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002b1 98da      	CBI  0x1B,2
                +
0002b2 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002b3 958a     +DEC R24
0002b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002b5 c078      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002b6 93aa      	ST   -Y,R26
0002b7 81a8      	LD   R26,Y
0002b8 dfe9      	RCALL __lcd_write_nibble_G101
0002b9 81e8          ld    r30,y
0002ba 95e2          swap  r30
0002bb 83e8          st    y,r30
0002bc 81a8      	LD   R26,Y
0002bd dfe4      	RCALL __lcd_write_nibble_G101
                +
0002be e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0002bf 958a     +DEC R24
0002c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0002c1 c06c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002c2 93aa      	ST   -Y,R26
0002c3 81e8      	LD   R30,Y
0002c4 e0f0      	LDI  R31,0
0002c5 59e0      	SUBI R30,LOW(-__base_y_G101)
0002c6 4ffe      	SBCI R31,HIGH(-__base_y_G101)
0002c7 81e0      	LD   R30,Z
0002c8 81a9      	LDD  R26,Y+1
0002c9 0fae      	ADD  R26,R30
0002ca dfeb      	RCALL __lcd_write_data
0002cb 80b9      	LDD  R11,Y+1
0002cc 80a8      	LDD  R10,Y+0
0002cd 9622      	ADIW R28,2
0002ce 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002cf e0a2      	LDI  R26,LOW(2)
0002d0 940e 0379 	CALL SUBOPT_0x6
0002d2 e0ac      	LDI  R26,LOW(12)
0002d3 dfe2      	RCALL __lcd_write_data
0002d4 e0a1      	LDI  R26,LOW(1)
0002d5 940e 0379 	CALL SUBOPT_0x6
0002d7 e0e0      	LDI  R30,LOW(0)
0002d8 2eae      	MOV  R10,R30
0002d9 2ebe      	MOV  R11,R30
0002da 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002db 93aa      	ST   -Y,R26
0002dc 81a8      	LD   R26,Y
0002dd 30aa      	CPI  R26,LOW(0xA)
0002de f011      	BREQ _0x2020005
0002df 14bd      	CP   R11,R13
0002e0 f048      	BRLO _0x2020004
                 _0x2020005:
0002e1 e0e0      	LDI  R30,LOW(0)
0002e2 93ea      	ST   -Y,R30
0002e3 94a3      	INC  R10
0002e4 2daa      	MOV  R26,R10
0002e5 dfdc      	RCALL _lcd_gotoxy
0002e6 81a8      	LD   R26,Y
0002e7 30aa      	CPI  R26,LOW(0xA)
0002e8 f409      	BRNE _0x2020007
0002e9 c044      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002ea 94b3      	INC  R11
0002eb 9ad8      	SBI  0x1B,0
0002ec 81a8      	LD   R26,Y
0002ed dfc8      	RCALL __lcd_write_data
0002ee 98d8      	CBI  0x1B,0
0002ef c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0002f0 93ba      	ST   -Y,R27
0002f1 93aa      	ST   -Y,R26
0002f2 931a      	ST   -Y,R17
                 _0x202000B:
0002f3 81e9      	LDD  R30,Y+1
0002f4 81fa      	LDD  R31,Y+1+1
0002f5 9631      	ADIW R30,1
0002f6 83e9      	STD  Y+1,R30
0002f7 83fa      	STD  Y+1+1,R31
0002f8 9731      	SBIW R30,1
0002f9 91e4      	LPM  R30,Z
0002fa 2f1e      	MOV  R17,R30
0002fb 30e0      	CPI  R30,0
0002fc f019      	BREQ _0x202000D
0002fd 2fa1      	MOV  R26,R17
0002fe dfdc      	RCALL _lcd_putchar
0002ff cff3      	RJMP _0x202000B
                 _0x202000D:
000300 8118      	LDD  R17,Y+0
                 _0x2080002:
000301 9623      	ADIW R28,3
000302 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000303 93aa      	ST   -Y,R26
000304 b3ea      	IN   R30,0x1A
000305 6fe0      	ORI  R30,LOW(0xF0)
000306 bbea      	OUT  0x1A,R30
000307 9ad2      	SBI  0x1A,2
000308 9ad0      	SBI  0x1A,0
000309 9ad1      	SBI  0x1A,1
00030a 98da      	CBI  0x1B,2
00030b 98d8      	CBI  0x1B,0
00030c 98d9      	CBI  0x1B,1
00030d 80d8      	LDD  R13,Y+0
00030e 81e8      	LD   R30,Y
00030f 58e0      	SUBI R30,-LOW(128)
                +
000310 93e0 0172+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000312 81e8      	LD   R30,Y
000313 54e0      	SUBI R30,-LOW(192)
                +
000314 93e0 0173+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000316 e1a4      	LDI  R26,LOW(20)
000317 e0b0      	LDI  R27,0
000318 940e 0386 	CALL _delay_ms
00031a 940e 037f 	CALL SUBOPT_0x7
00031c 940e 037f 	CALL SUBOPT_0x7
00031e 940e 037f 	CALL SUBOPT_0x7
000320 e2a0      	LDI  R26,LOW(32)
000321 df80      	RCALL __lcd_write_nibble_G101
                +
000322 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000323 958a     +DEC R24
000324 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000325 e2a8      	LDI  R26,LOW(40)
000326 df8f      	RCALL __lcd_write_data
000327 e0a4      	LDI  R26,LOW(4)
000328 df8d      	RCALL __lcd_write_data
000329 e8a5      	LDI  R26,LOW(133)
00032a df8b      	RCALL __lcd_write_data
00032b e0a6      	LDI  R26,LOW(6)
00032c df89      	RCALL __lcd_write_data
00032d dfa1      	RCALL _lcd_clear
                 _0x2080001:
00032e 9621      	ADIW R28,1
00032f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000330 93ba      	ST   -Y,R27
000331 93aa      	ST   -Y,R26
000332 91a9          ld   r26,y+
000333 91b9          ld   r27,y+
000334 27ee          clr  r30
000335 27ff          clr  r31
                 strlen0:
000336 916d          ld   r22,x+
000337 2366          tst  r22
000338 f011          breq strlen1
000339 9631          adiw r30,1
00033a cffb          rjmp strlen0
                 strlen1:
00033b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00033c 93ba      	ST   -Y,R27
00033d 93aa      	ST   -Y,R26
00033e 27aa          clr  r26
00033f 27bb          clr  r27
000340 91e9          ld   r30,y+
000341 91f9          ld   r31,y+
                 strlenf0:
000342 9005      	lpm  r0,z+
000343 2000          tst  r0
000344 f011          breq strlenf1
000345 9611          adiw r26,1
000346 cffb          rjmp strlenf0
                 strlenf1:
000347 01fd          movw r30,r26
000348 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 _tx_buffer:
000168           	.BYTE 0x8
                 __base_y_G101:
000170           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000349 93fa      	ST   -Y,R31
00034a 93ea      	ST   -Y,R30
00034b e080      	LDI  R24,0
00034c 940e 027d 	CALL _printf
00034e 9622      	ADIW R28,2
00034f e0e0      	LDI  R30,LOW(0)
000350 93ea      	ST   -Y,R30
000351 e0a0      	LDI  R26,LOW(0)
000352 940c 02c2 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000354 932a      	ST   -Y,R18
000355 85ad      	LDD  R26,Y+13
000356 85be      	LDD  R27,Y+13+1
000357 85ef      	LDD  R30,Y+15
000358 89f8      	LDD  R31,Y+15+1
000359 9509      	ICALL
00035a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00035b 89e8      	LDD  R30,Y+16
00035c 89f9      	LDD  R31,Y+16+1
00035d 9734      	SBIW R30,4
00035e 8be8      	STD  Y+16,R30
00035f 8bf9      	STD  Y+16+1,R31
000360 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000361 85ad      	LDD  R26,Y+13
000362 85be      	LDD  R27,Y+13+1
000363 85ef      	LDD  R30,Y+15
000364 89f8      	LDD  R31,Y+15+1
000365 9509      	ICALL
000366 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000367 89a8      	LDD  R26,Y+16
000368 89b9      	LDD  R27,Y+16+1
000369 9614      	ADIW R26,4
00036a 940e 0398 	CALL __GETW1P
00036c 83ee      	STD  Y+6,R30
00036d 83ff      	STD  Y+6+1,R31
00036e 81ae      	LDD  R26,Y+6
00036f 81bf      	LDD  R27,Y+6+1
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000371 89a8      	LDD  R26,Y+16
000372 89b9      	LDD  R27,Y+16+1
000373 9614      	ADIW R26,4
000374 940e 0398 	CALL __GETW1P
000376 87ea      	STD  Y+10,R30
000377 87fb      	STD  Y+10+1,R31
000378 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000379 940e 02b6 	CALL __lcd_write_data
00037b e0a3      	LDI  R26,LOW(3)
00037c e0b0      	LDI  R27,0
00037d 940c 0386 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00037f e3a0      	LDI  R26,LOW(48)
000380 940e 02a2 	CALL __lcd_write_nibble_G101
                +
000382 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000383 958a     +DEC R24
000384 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000385 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000386 9610      	adiw r26,0
000387 f039      	breq __delay_ms1
                 __delay_ms0:
000388 95a8      	wdr
                +
000389 ef8a     +LDI R24 , LOW ( 0xFA )
00038a e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00038b 9701     +SBIW R24 , 1
00038c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00038d 9711      	sbiw r26,1
00038e f7c9      	brne __delay_ms0
                 __delay_ms1:
00038f 9508      	ret
                 
                 __ADDW2R15:
000390 2400      	CLR  R0
000391 0daf      	ADD  R26,R15
000392 1db0      	ADC  R27,R0
000393 9508      	RET
                 
                 __ANEGW1:
000394 95f1      	NEG  R31
000395 95e1      	NEG  R30
000396 40f0      	SBCI R31,0
000397 9508      	RET
                 
                 __GETW1P:
000398 91ed      	LD   R30,X+
000399 91fc      	LD   R31,X
00039a 9711      	SBIW R26,1
00039b 9508      	RET
                 
                 __GETW1PF:
00039c 9005      	LPM  R0,Z+
00039d 91f4      	LPM  R31,Z
00039e 2de0      	MOV  R30,R0
00039f 9508      	RET
                 
                 __SAVELOCR6:
0003a0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003a1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003a2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003a3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003a4 931a      	ST   -Y,R17
0003a5 930a      	ST   -Y,R16
0003a6 9508      	RET
                 
                 __LOADLOCR6:
0003a7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003a8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003a9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003aa 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ab 8119      	LDD  R17,Y+1
0003ac 8108      	LD   R16,Y
0003ad 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   6 
r8 :   5 r9 :   4 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  34 r17:  32 r18:  27 r19:   8 r20:   9 r21:  17 r22:   4 r23:   0 
r24:  24 r25:   3 r26:  94 r27:  31 r28:  13 r29:   1 r30: 217 r31:  66 
x  :  13 y  : 169 z  :  19 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  19 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  40 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  45 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  10 cpc   :   4 cpi   :  35 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   8 jmp   :  26 ld    :  33 ldd   :  64 ldi   : 107 
lds   :   0 lpm   :  16 lsl   :   0 lsr   :   0 mov   :  24 movw  :   8 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  49 pop   :   1 push  :   1 rcall :  17 ret   :  22 
reti  :   1 rjmp  :  62 rol   :   0 ror   :   0 sbc   :   1 sbci  :   6 
sbi   :   5 sbic  :   1 sbis  :   0 sbiw  :  13 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  60 std   :  31 sts   :   2 sub   :   1 subi  :  20 swap  :   1 
tst   :   7 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00075c   1830     54   1884   16384  11.5%
[.dseg] 0x000060 0x000174      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
